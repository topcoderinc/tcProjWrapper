{
    "docs": [
        {
            "location": "/topcoder/copilotsResponsiblites/", 
            "text": "Dev Copilot Role \n Responsibilities\n\n\nOverview\n\n\nWhat is a Copilot?\n\n\nA highly respected and skilled Topcoder member who has passed a certification process and is responsible for running challenges to produce the best outcome.  \n\n\nThe copilot receives it name originally from an airplane copilot who is responsible for helping the main pilot with flying the plane.  But just like in the airlines, a copilot is the first officer and is \nnot \nan apprentice or sidekick but shares flying duties equally with the pilot.  Both roles can fly the plane and take part in the decision making.  This is no difference here, copilots along with the client and architects drive the project to success.\n\n\nPrimary Responsibilities\n\n\n\n\n\n\nWrite challenge specifications\n\n\n\n\n\n\nLaunch challenges\n\n\n\n\n\n\nProvide technical consistency between challenges\n\n\n\n\n\n\nReduce risk in challenges\n\n\n\n\n\n\nMonitor challenge health\n\n\n\n\n\n\nInteract and support the community for all of challenges they launch\n\n\n\n\n\n\nCommunicate accurate status reports to challenge owners.\n\n\n\n\n\n\nManage budget\n\n\n\n\n\n\nManage timelines\n\n\n\n\n\n\nManage deployment of the application\n\n\n\n\n\n\nSpot check reviewers and submissions\n\n\n\n\n\n\nExtract and clarify requirements from challenge owners\n\n\n\n\n\n\nManage source control\n\n\n\n\n\n\nExpectations of Deliverables and Outcomes\n\n\nThe copilot is responsible for the successful delivery of a challenge or set of challenges.  At the end of each challenge, the copilot should answering these vital questions:  Were the requirements met?  Did we deliver what we set out to implement?  This includes fully documented, tested, and deployable code.\n\n\nTime Investment\n\n\nCopilots are expected to drive projects to completion.  This includes analyzing specifications and projects, running challenges, building and deploying applications and supporting development inquiries.  \n\n\nSupporting a challenge we estimate takes\n\n\n\n\n\n\n2-4 hours writing a challenge specification\n\n\n\n\n\n\n2 hours a day supporting forums during submission phase (this might be short)\n\n\n\n\n\n\n2-4 hours reviewing the output of the review phase and deploying an application\n\n\n\n\n\n\nPerformance Evaluation\n\n\n\n  \n\n    \nDelivery of materials on time and according to gameplan\n\n  \n\n  \n\n    \nChallenge price point comes in on budget and in line with other similar challenges\n\n  \n\n  \n\n    \nChallenge fulfillment\n\n  \n\n  \n\n    \nCustomer satisfaction\n\n  \n\n  \n\n    \nMember satisfaction (clarity of spec, communicating important information, quality of spec, responsiveness within SLAs for forum questions, etc.)\n\n  \n\n  \n\n    \nReviewer satisfaction\n\n  \n\n  \n\n    \nProject Copilot satisfaction\n\n  \n\n  \n\n    \nChallenge Manager/Architect satisfaction (quality of spec, matching requirements, etc.)\n\n  \n\n\n\n\n\nThe Copilot Mindset\n\n\nThe copilot is the leader!  You are the equal partner of the client running the project.  Together you will set the course and direction to produce a fantastic outcome.  \n\n\nBeing a Copilot\n\n\nThis is a prestigious position.  Only the best are invited to this role and are entrusted with working with Topcoder's clients and their confidential projects.  Not only are you responsible for delivery for the client but also producing quality opportunities for the rest of the Topcoder community.\n\n\nWorking with the Community\n\n\nYour job is to guide the community to the best outcomes possible for a challenge.  You'll help support and nurture the community to work on your challenges.  Additionally, you'll constructively provide feedback and guide them through the submission process.  Lastly, you'll provide the final job as reviewer and arbiter to make sure the community produces high level of outcomes.\n\n\nWorking with the Customer\n\n\nYour job is to help guide the client along the correct path.  At the end of the day we need a successful outcome and your job is to steer the team in that direction.  You will need to be respectful and listen to the customer but your job is not to do exactly as the customer requests if those instructions would put the project in jeopardy by increasing timelines, exceeding budgets and/or adding risky technology decisions.\n\n\nCode of Ethics\n\n\nDo not provide favoritism to any one member.  Treat all the members the same.  Do not provide any information to a competitor that is not provided to all competitors.  Be honest, do not try to make the situation sound better than it is.  Always tell the whole story including all issues with any clients.\n\n\nIn addition to the above, you are expected to always comply with our standard \nTerms\n and \nCode of Conduct\n. Failure to do so may result in loss of the position and suspension or expulsion from the community.\n\n\nSecrets for Success\n\n\n\n\n\n\nCommunicate, communicate, communicate!  Don't be afraid to communicate to everyone and anyone.\n\n\n\n\n\n\nPush to get work done sooner and launch challenges sooner.  You can always clean up mistakes later but harder to get back missing time.\n\n\n\n\n\n\nUse \ncontinuous \nintegration\n to build often and faster!\n\n\n\n\n\n\nDecreases integration time\n\n\n\n\n\n\nCode review becomes easier\n\n\n\n\n\n\nDecreases merging\n\n\n\n\n\n\nPuts code in the hand of the clients faster.\n\n\n\n\n\n\nRun tests and make sure code coverage is there\n\n\n\n\n\n\nTest earlier and find bugs earlier!\n\n\n\n\n\n\n\n\n\n\nInclude \nmore\n testing.  Add more testing to your gameplans.  Don't wait to the end to test and find bugs.  Do it as often as possible.  Ideally every 2 weeks\n\n\n\n\n\n\nProvide milestone releases.  Release versions to QA as soon as you can.  Ideally you don't go longer than 2-3 weeks without a deploy.\n\n\n\n\n\n\nGive clear and concise statements about what is required and expected in all forum interactions.  Ambiguous statements make it hard for members and reviewers to set the appropriate expectations.\n\n\n\n\n\n\nView submissions early!  If someone submits early, take a peek.  It is a great feeling to know you are going to have at least one working solution and it will help to manage customer expectations and timelines.\n\n\n\n\n\n\nKnow your \ndevelopment challenge types\n!  It is also good to review the different design challenge types and \ndata science challenge types\n in case you need to recommend using one of those types instead.  Don't worry you would get additional help from a trained copilot for those types.\n\n\n\n\n\n\nApplying for Opportunities\n\n\nDevelopment Challenges\n\n\nYou will be added to a copilot list.  A topcoder employee will email you and offer you positions.  Please email the employee any questions and review the opportunity.  Afterwards, you can an accept or reject the opportunity over email.\n\n\nConnect V1\n\n\nAs a Connect Copilot you will be added to Topcoder Slack.  You will see a channel called connect-copilots\n\n\n\n\nYou will see admins posting projects and you can reply if you are interested right in slack to be assigned. Before accepting, please view the link for the requirements and technologies used.\n\n\n\n\nConnect V2\n\n\nTBD\n\n\nHow to Perform the Copilot roles\n\n\nSigning an NDA and Terms\n\n\n\n\n\n\nIf you would like to be considered as a copilot for NDA based challenges.  Please make sure you have completed this NDA\n\n\n\n\nhttps://www.docusign.net/member/EnvelopeSetupTab.aspx?ti=a086d4f2bd4d42b8be116f6ff5a2fa7d\no\n\n\n\n\n\n\n\n\nHow to Create a Gameplan for Development\n\n\nNOTE: There needs to be a lifecycle management section. Gameplan creation only happens once.\n\n\nGameplans, or project plans, are created at the beginning of the project as a project is being scoped for both cost and duration. Gameplans can be created as follows:\n\n\nRequesting a new quote\n\n\n\n\n\n\nIn slack type the slash command \"/quote\" followed by the name of the project.\n\n\n\n\n\n\n\nChose a name for the quote that makes it unique like the project name\n\n\n\n\n\n\nAfter the command is typed, the quote is created and the slack window will be updated with a link to the quote\n\n\n\n\n\n\n\nClick the link and log into Smartsheet. Be sure to login to smartsheet with the same email as your slack account.\n\n\n\n\n\n\nOnce you\u2019ve logged into smartsheet you will be presented with a blank quote in smartsheet.\n\n\n\n\n\n\n\nEditing a new quote\n\n\nOnce a new quote has been created you can edit the quote in smartsheet to build out a Gameplan. The following columns in the smartsheet are important for building this game plan\n\n\n\n\n\n\nTask Description - The task description is the name or title of the challenge. This should be a descriptive name of the challenge but not too long that it will wrap in direct. A good challenge name should have the project name embedded in it as well.\n\n\n\n\n\n\nStart - This is the date when you plan to have the challenge start. Many challenges will have this date set automatically based on dependencies of previous challengs.\n\n\n\n\n\n\nEnd - This is the date when you plan to have the challenge end. This is related to the start date and the challenge duration.\n\n\n\n\n\n\nDuration - This is the number of days the challenge is planned to run. Duration, Start Date, and End Date all work together, You can only update two of the three, the other is calculated. If you change the duration, the end date will automatically change. If you change the end date, the duration will change.\n\n\n\n\n\n\nAverage Duration is a field based on historic data for this challenge type.\n\n\n\n\n\n\nPredecessors - This shows the dependencies of a challenge on another row.\n\n\n\n\n\n\nInputs - This defines the expected inputs for a given challenge.\n\n\n\n\n\n\nOutcomes - These are the planned outcomes of a given challenge\n\n\n\n\n\n\nChallenge Type - one of:\n\n\n\n\n\n\nDesign-Wireframe\n\n\n\n\n\n\nDesign-MobileStoryboard\n\n\n\n\n\n\nDesign-WebStoryboard\n\n\n\n\n\n\nDesign-Ideation\n\n\n\n\n\n\nDesign-Prototype\n\n\n\n\n\n\nDesign-F2F\n\n\n\n\n\n\nDev-Assembly\n\n\n\n\n\n\nDev-Code\n\n\n\n\n\n\nDev-F2F\n\n\n\n\n\n\nDev-BugHunt\n\n\n\n\n\n\nDesign-Prod-Wireframe\n\n\n\n\n\n\n\n\n\n\nChallenge types are prefixed by the challenge community they belong to.\n\n\n\n\n\n\nChallenge Size - one of :\n\n\n\n\n\n\nsmall\n\n\n\n\n\n\nmedium\n\n\n\n\n\n\nlarge\n\n\n\n\n\n\n\n\n\n\nWriting a specification\n\n\n\n\n\n\nReview all project documentation and deliverables\n\n\n\n\n\n\nCommunicate all questions with other team members including clients.\n\n\n\n\n\n\nReview how to write a good spec tutorial\n\n\n\n\n\n\nLaunch the challenge\n\n\n\n\n\n\nThrough Topcoder Direct\n\n\n\n\n\n\nLog into \nhttp://topcoder.com/direct\n\n\n\n\n\n\n\n\n\n\n\n\nChose your project name and billing account\n\n\n\n\n\n\nSchedule your start date and submission date as well as the challenge type.\n\n\n\n\n\n\nFor review type select community or internal (only use this if you are reviewing or the client.\n\n\n\n\n\n\n\n\n\n\n\n\nInsert your requirements and overview here\n\n\n\n\n\n\n\n\n\n\n\n\nYou must select your technology\n\n\n\n\n\n\nUpload any \nPUBLIC\n files here. Any private challenges must be uploaded to the forums after the challenge has been created.  These files are \nOPEN to EVERYONE,\n even unregistered members.\n\n\n\n\n\n\nAdjust prizes, usually the defaults are fine but you have the flexibility to change them.\n\n\n\n\n\n\nYou can use the preview button to see what your challenge looks like.\n\n\n\n\n\n\nClick \nSave as draft\n or continue.  Once you click \nContinue\n you also need to click \nActivate\n to make it live!\n\n\n\n\n\n\n\n\n\n\nThrough Glib\n\n\n\n\nhttps://help.topcoder.com/hc/en-us/articles/225540228-Topcoder-Integration-with-the-Topcoder-Chrome-Extension\n\n\n\n\n\n\n\n\n\n\n\n\nAssembly vs Code vs Jira Task vs F2F\n\n\nFirst review all of the different challenge types: \nhttps://help.topcoder.com/hc/en-us/articles/217481558-Development-Challenge-Types\n\n\n\n\n\n\nFirst To Finish\n (or F2F) is used when you need code quickly and the task is well defined and typically is a small amount of work.\n\n\n\n\n\n\nAssembly\n challenges are used when you know what the expected output is.  These challenges include final fixes.\n\n\n\n\n\n\nCode\n challenges are used for more creative iterative challenges.  Final fixes are not included and any follow on changes should be rolled into the next challenge.\n\n\n\n\n\n\nReviewing your challenge\n\n\n\n\n\n\nConfirm you have access to the competition management system called Online Review or OR. Log into online review at http://software.topcoder.com/review\n\n\n\n\n\n\nYou will now see My Open Projects and click on the appropriate challenge\n\n\n\n\n\n\n\n\n\n\nVerify Competition details by clicking on the challenge name in the previous menu and verifying your dates are correct.  You will also notice in green the highlighted phase specific tabs for this challenge.\n\n\n\n\n\n\n\n\n\n\nAt the bottom of the page you will notice the Project details and team members.  You will see Topcoder staff assigned as orange handles.\n\n\n\n\n\n\n\n\n\n\n\n\nYou can now click the forum link in the top right hand menu.  This will take you to the forums. This will ensure you have access to the appropriate forum and you will want to click watch to receive email notifications.\n\n\n\n\n\n\n\n\n\n\n\n\nHINT: \nthis \nlink\n will list all of your watched forums.  You can edit your preferences from there.\n\n\n\n\n\n\nAdding Team Members\n\n\n\n\n\n\nAt the bottom of your challenge in Online Review you can click \"Manage Project\"\n\n\n\n\n\n\n\n\n\n\n\n\nThen you can enter observers or a designer to watch the project if you need help.\n\n\n\n\n\n\n\n\n\n\n\n\nOptionally you can add other roles by click edit project and scrolling down the the roles section.\n\n\n\n\n\n\n\n\n\n\n\n\nNOTE: This gives you more control, but the first one is simpler to use and will meet 99% of the use cases.\n\n\n\n\n\n\nRules for Extending / Changing Timelines\n\n\n\n\n\n\nIf the submission phase is closed you CANNOT reopen the challenge unless there were issue with Topcoder's systems\n\n\n\n\n\n\nIf the submission phase is not closed you can extend for the following reasons\n\n\n\n\n\n\nRelevant forum questions have not been answered for more than 24 hours.\n\n\n\n\n\n\nSome of the relevant materials were provided late after the Submission started.\n\n\n\n\n\n\nThere was a significant change in the requirements after the Submission started.\n\n\n\n\n\n\nThere was a problem with TopCoder servers which prevented competitors from working on the contest.\n\n\n\n\n\n\nExtensions will not be added in the last 24 hours.\n\n\n\n\n\n\n\n\n\n\nMinimum extension time frame is 24 hours.\n\n\n\n\n\n\nTips and Tricks\n\n\n\n\n\n\nUsually a failed challenge has an issue.  Best bet is to post to the forums find out why people are not participating and repost\n\n\n\n\n\n\nRelaunch the challenge as a F2F or with a short timeline if you think someone will submit\n\n\n\n\n\n\nAsk members to submit even if they think they will fail.  You still might be able to use a failed submission see \nFailed Submissions\n section.\n\n\n\n\n\n\n\n\n\n\nChanging Timelines\n\n\n\n\n\n\nIn your project click Edit Project button\n\n\n\n\n\n\n\n\n\n\n\n\nNow you can see all the phases in the timeline section\n\n\n\n\n\n\n\n\n\n\n\n\nChanging the duration in terms of number of hours or hours:minutes will change the timeline for the current phase by adding that time to the start date of the phase\n\n\n\n\n\n\nAlternatively you may click the button next to phase end and enter an EXACT time the phase should end and the phase will end based on that time.\n\n\n\n\n\n\nReopening phases is not possible in this tool, you must contact \nsupport@topcoder.com\n to reopen a phase if necessary.\n\n\n\n\n\n\nManaging Git Source Control\n\n\n\n\n\n\nReview the great article by \nVincent Driessen\n on git flow here: http://nvie.com/posts/a-successful-git-branching-model/\n\n\n\n\n\n\nWe follow the Git Flow process (NOTE: not Github Flow)\n\n\n\n\n\n\nBranching Model Setup (gitlow style):\n\n\n\n\n\n\nMaster Branch (default in most cases) used for releases only. Version Tags should be applied at release time.\n\n\n\n\n\n\nDevelop Branch (branched from master) used for active development line and candidate releases (tags)\n\n\n\n\n\n\nCreate Feature branch based on each feature being developed.  Follow the convention of prefixing the name of the branch with the challenge id.\n\n\n\n\n\n\n\n\n\n\nMark all branches as protected.  This will prevent members from overwriting branches.  \n\n\n\n\n\n\nEach member will fork and issue Pull/Merge requests against\n\n\n\n\n\n\nMerging:\n\n\n\n\n\n\nAfter accepting the winning submission merge request into feature branch merge the feature branch into the \"develop\" branch after performing integration testing.\n\n\n\n\n\n\nProper gitflow usage dictates using the --no-ff option to prevent \"fast-forwarding\" of commits.\n\n\n\n\n\n\n\n\n\n\nReleases:\n\n\n\n\n\n\nRelease candidates should come from the \"develop\" branch and be tagged as such.\n\n\n\n\n\n\nMerge \"develop\" into the \u201cmaster\u201d in preparation for release (--no-ff)\n\n\n\n\n\n\nReleases should be pulled from the \"master\" branch only\n\n\n\n\n\n\nTag the \"master\" at each major release (with version number/name)\n\n\n\n\n\n\n\n\n\n\nForum Support\n\n\n\n\n\n\nDuring the competition it is important for the copilot to manage and monitor the forums.  We recommend you at least answer questions twice a day at 8 am and 8 pm your time. Topcoder's commitment to members is to provide them an answer within 24 hours of their post.  If questions are unanswered for a long period of time most likely the question poster and other members will not participate in the challenge.\n\n\n\n\n\n\nRemember all responses here become part of the challenge requirements.  Be clear and concise in all answers.  Do not leave things ambiguous.\n\n\n\n\n\n\nRegistration Phase\n\n\n\n\n\n\nCopilots will monitor member registration during this phase.  In Online Review, you can view the registration tab to view who has registered for the challenge.  \n\n\n\n\n\n\n\n\n\n\n\n\nYou will want to make sure you have a mix of members who are active.  By clicking on their name you can view their profile to see what challenges they have worked on and how active they are at Topcoder.\n\n\n\n\n\n\nThis is also a good time to view the forums to see who has been answering questions.  If there are no questions, you may need to reach out to the members.\n\n\n\n\n\n\nIf the track is rated, you will be able to view the ratings for those members in the track.  See more about ratings:\n\n\n\n\n\n\nReliability is used for a few tracks.  It measures how often a member submits a passing submission when they register for a challenge.  See more about reliability: \nhttps://help.topcoder.com/hc/en-us/articles/219240797-Development-Reliability-Ratings-and-Bonuses\n\n\n\n\n\n\nTIP: If a member submits early you can view their submissions in the submission and screening tab and download the submission to view it.\n\n\n\n\n\n\nIncreasing Registration for a Challenge\n\n\n\n\n\n\nTopcoder sends newsletters to all members on a weekly basis.  You can contact \nsupport@topcoder.com\n to request that your challenge be listed.\n\n\n\n\n\n\nSupport will also help add your challenge to our social media rotation of posts.\n\n\n\n\n\n\nPlug your challenge in the \nGeneral Development Forums\n.\n\n\n\n\n\n\nThe Submission/Screening Phase\n\n\n\n\n\n\nIn online review you can view all of the submissions.  This tab is accessible as soon as the submission phase opens.\n\n\n\n\n\n\nBy clicking the submission number, you can download the latest submission.  \n\n\n\n\n\n\nThe plus symbol expands to see earlier submissions\n\n\n\n\n\n\n\n\n\n\n\n\nIf screening is enabled for this phase, you can view the scorecard and status if it is completed.  \n\n\n\n\n\n\nThe Review Phase\n\n\n\n\n\n\nIn online review you can view all of the submissions.  This tab is accessible as soon as the submission phase opens.\n\n\n\n\n\n\nBy clicking the submission number, you can download the latest submission.  \n\n\n\n\n\n\nThe plus symbol expands to see earlier submissions\n\n\n\n\n\n\n\n\n\n\n\n\nIf screening is enabled for this phase, you can view the scorecard and status if it is completed.  \n\n\n\n\n\n\nExpectations for the Final Fix Phase and Code Challenges\n\n\n\n\n\n\nFor code this is easy, there is no final fix phase.  You should not expect members to implement final fixes.  This is accomplished with a follow on task or challenge.\n\n\n\n\n\n\nFor assembly challenges, any items that were in the requirements and were not implemented are fixable if they were identified as part of the scorecard.  If a member does not implement these fixes 25% of their payment may be held and used to task someone else to implement these fixes.\n\n\n\n\n\n\nFailed Submissions\n\n\n\n\n\n\nIf a challenge fails and doesn't receive any passing submissions it does not have to end there!\n\n\n\n\n\n\nReview the submissions and review the scorecards\n\n\n\n\n\n\nDo any of the submissions get you to a great starting spot?  \n\n\n\n\n\n\nIf yes, offer them second place prize money and use that code as the building blocks to a follow on challenge\n\n\n\n\n\n\nIf not you will need to restart a new challenge.\n\n\n\n\n\n\n\n\n\n\nSupport during the competition\n\n\n\n\n\n\nDuring the competition if you need any support around your challenge there are resources to help you.\n\n\n\n\n\n\nClick contact managers to contact Topcoder Staff\n\n\n\n\n\n\n\n\n\n\n\n\nRunning a bug bash from Source control\n\n\n\n\n\n\nAccount/Access Structure:\n\n\n\n\n\n\nUnless required, repositories will be private by default\n\n\n\n\n\n\nCreate team/group based access to repositories\n\n\n\n\n\n\nMember group access includes:\n\n\n\n\n\n\nreceive read/write access to repository\n\n\n\n\n\n\nability to create tickets\n\n\n\n\n\n\nability to self-assign tickets\n\n\n\n\n\n\nability to add and remove tags from tickets\n\n\n\n\n\n\nrepo user should equate/tie to platform user\n\n\n\n\n\n\n\n\n\n\nManager group access includes:\n\n\n\n\n\n\nreceive read/write access to repository\n\n\n\n\n\n\nability to create tickets\n\n\n\n\n\n\nability to self-assign tickets\n\n\n\n\n\n\nability to create wiki pages\n\n\n\n\n\n\nadministrative control over repo\n\n\n\n\n\n\nrepo user should equate/tie to platform user\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrequisite teams applied to groups of repos for visibility over other components of a project.\n\n\n\n\n\n\n\n\n\n\nFollow proper branching (see earlier topic)\n\n\n\n\n\n\nChallenge Setup:\n\n\n\n\n\n\nIn your challenge, ask the community to email you/co-pilot and request access to the project group (\"Goliath National Bank Team\") by sending their username.\n\n\n\n\n\n\nCreate your challenge as a code challenge.  You should provide an overview of the app and advertise your project here.  Provide link to SCM.\n\n\n\n\n\n\nAdd community member to the group  (example name \"Goliath National Bank Team\") with \u201cDeveloper\u201d access only. This allows them to create tickets, fork the repo, and create branches but will not allow them to touch protected branches. Note: this level of access is a concept from Gitlab that does not exist in Github currently. See \nhttps://gitlab.com/help/permissions/permissions.md\n\n\n\n\n\n\nHave member add challenge managers to their private branch as a master and reviews as reporter. Note: this level of access is a concept from Gitlab that does not exist in Github currently.\n\n\n\n\n\n\n\n\n\n\nSubmission Process:\n\n\n\n\n\n\nRequire community members to fork the project at the feature branch to acquire the current code base. This will allow for concurrent challenge running as each branch is a separate challenge.\n\n\n\n\n\n\nTwo options for gaining access to code are available.\n\n\n\n\n\n\nRequire submissions of code by through a merge request.  The only issue with this method is that the code can be viewed in a \"diff\" of the merge request. This is the prefered method, unless privacy is a concern use the second.\n\n\n\n\n\n\nRequire that the managers \n reviewers be added to the private fork as a member. This is not exactly the ideal automation but it does get around the visibility of the code in the merge request diff.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReview Process:\n\n\n\n\n\n\nTest pull/merge request submissions locally before accepting.\n\n\n\n\n\n\nIf submission passes, accept merging into feature branch.\n\n\n\n\n\n\nIf submission fails, reviewer can make comments directly against code or merge request ticket.\n\n\n\n\n\n\n\n\n\n\nWikis:\n\n\n\n\n\n\nWikis should be utilized extensively as a central repository for project information.\n\n\n\n\n\n\nTypes of information include:\n\n\n\n\n\n\nProject description\n\n\n\n\n\n\nSetup guides\n\n\n\n\n\n\nReference materials\n\n\n\n\n\n\n\"Bug Bash\" instructions\n\n\n\n\n\n\nChallenge detail listings\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIssues List\n\n\n\n\n\n\nIssues lists can be utilized for general bug tracking as well as \"Bug Bashing\"\n\n\n\n\n\n\nMembers can be alerted to issue tickets by utilizing the @all/@organization/team-name mention\n\n\n\n\n\n\nBug Bashing Process\n\n\n\n\n\n\nCreate the following tags on the repo:\n\n\n\n\n\n\n\"_OPEN FOR PICKUP\" denoting ticket is available to members to self-assign\n\n\n\n\n\n\n\"_READY FOR REVIEW\" denoting that a member has completed the requested work\n\n\n\n\n\n\n\"_ACCEPTED\" denoting managers have accepted ticket solution\n\n\n\n\n\n\n\"_PAID\" denoting ticket has been processed for payment\n\n\n\n\n\n\n\"Priority X\" where X is a value from 1 through 5 denoting Appirio triage priorities (1-Blocker through 5-Enhancement)\n\n\n\n\n\n\n\n\n\n\nAssign a priority label to tickets.\n\n\n\n\n\n\nAssign a \"point\" value to all tickets in the ticket title as a prefix.\n\n\n\n\n\n\nPoints represent some fixed dollar amount designated by the managers\n\n\n\n\n\n\nAs a general rubric, point values are a multiple or priority. ie: Priority 1 issues should be addressed first and thus should hold a higher points value than lower priorities. P1s == 4P, P2 == 3P, etc.\n\n\n\n\n\n\nThe purpose of points is to create an arbitrary value for tickets that can be driven up and down on demand. For example, a weekend \"double points blitz\" can incent members to scramble and burn down tickets faster.\n\n\n\n\n\n\n\n\n\n\nMention @all members that a ticket is available for pickup.\n\n\n\n\n\n\nMembers self-assign tickets\n\n\n\n\n\n\nOnly one ticket is allowed per member at a time.\n\n\n\n\n\n\nIf a member has not submitted within 24hrs, the member forfeits the ticket and the ticket is unassigned.\n\n\n\n\n\n\nMember labels ticket as \"_READY FOR REVIEW\" once their submission is ready.\n\n\n\n\n\n\n\n\n\n\nAfter reviewing submission the manager/reviewer marks the ticket as \"_ACCEPTED\"\n\n\n\n\n\n\nAfter the manager has accepted the submission and process payment, the ticket is labelled \"_PAID\" and payment reference placed as a comment on the ticket.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRunning a F2F\n\n\n\n\n\n\nFirst to finish\n works very similar to a challenge but the first person to submit can win.  \n\n\n\n\n\n\nTypically the copilot will also serve as the reviewer here since you know what the solution needs to do.\n\n\n\n\n\n\nReview the solution, provide feedback in the forum and/or scorecard.  If you fail the solution another solution may be right behind it.  After each solution is reviewed, another one is taken off the queue.  If a submission wins, the rest are ignored.  \n\n\n\n\n\n\nSuggestions\n\n\n\n\n\n\nUse these for when you do not need variety in solutions.\n\n\n\n\n\n\nYou should also know the expected outcome in advance.\n\n\n\n\n\n\nTotal time spent on this work should be under 8 hours.\n\n\n\n\n\n\n\n\n\n\nRunning Jira Tasks\n\n\nWhile Topcoder Direct is a powerful tool, there are times when work or tasks are done outside of the platform and there is a need to pay a member directly. This will document that process.\n\n\nPre Requisites\n\n\nWhen you create a ticket in JIRA for payment, the processor needs to know which project, and thus which billing account, to charge the work to. You will need:\n\n\n\n\n\n\nProject in TC Direct associated to at least 1 valid Billing Account\n\n\n\n\n\n\nA JIRA project\n\n\n\n\n\n\nHandle of the member you are paying\n\n\n\n\n\n\nCreating a ticket\n\n\n\n\n\n\nNavigate to your JIRA project.\n\n\n\n\nNOTE: JIRA allows you to create components within your JIRA project. If you plan on running multiple projects out of your JIRA instance, or would benefit from being able to segment your tasks, consider using these (but not required by tool).\n\n\n\n\n\n\n\n\nSelect \"Create Bug\" link\n\n\n\n\n\n\nThe following fields are required in the default JIRA form:\n\n\n\n\n\n\nSummary - Short description of task; this will show up in your customer's invoice so choose words wisely\n\n\n\n\n\n\nReporter - Whoever logged the issue - could be copilot or you.\n\n\n\n\n\n\nFirst Place Payment - Amount of the member payment. Does NOT include markup.\n\n\n\n\n\n\nCockpit Project ID: This is the unique ID of your project in Topcoder Direct. If you are viewing your project, you can see it in the URL where the project id is XXXXX \nhttps://www.topcoder.com/direct/projectOverview.action?formData.projectId=XXXXX\n\n\n\n\n\n\nPayment Status: Must be set to \"Payment Owed\" to be picked up by the payment processor.\n\n\n\n\n\n\nSelect \"Create\" button to create the ticket.\n\n\n\n\n\n\nWhen ticket is ready to be paid, the final step is to \"Resolve\" the ticket in JIRA. This and the \"Payment Owed\" setting are what flags the ticket for the payment processor.\n\n\n\n\n\n\n\n\n\n\nBest Practices\n\n\n\n\n\n\nUse the \nDescription \nfield to store the details of task performed to justify the payment. If the work was done in an external system, include links to the work here. Remember: this is work the customer will be invoiced for, so if questions arise when they are reviewing for payment, you'll want to have links to the details already in place.\n\n\n\n\n\n\nUse the \nComponents \nfield to help segment work done for different projects on the account (if applicable).\n\n\n\n\n\n\nPower move - include the Topcoder Project ID in the Components name - i.e. \nMobileApp1-10123\n. One of the more common mistakes is entering the wrong project ID and invoicing the wrong billing account - this can help prevent that.\n\n\n\n\n\n\nManaging a bug hunt\n\n\n\n\n\n\nBug Hunts are different then most contests on topcoder.com - in that the reviewer is not assigned to the contest from the review pool, instead, the reviewer is the copilot. Copilots are responsible for reviewing all issues \n managing the contest. This includes:  \n\n\n\n\n\n\nModifying the contest timeline in OR so that the first 24 hours of the contest is a a registration period, and posting in the contest spec / forum that no one can submit any bug.\n\n\n\n\n\n\nDuring the registration period, providing a link to the deployed app or a link + instructions on building / deploying the code. This is done in the contest forum.\n\n\n\n\n\n\nAfter the submission phase ends:\n\n\n\n\n\n\nReviewing every defect and verifying that it\u2019s valid.\n\n\n\n\n\n\nRejecting duplicate issues (the ticket submitted first is logged against the total for a submitter).\n\n\n\n\n\n\nDetermine if the issue reported constitutes an acceptable issue (spelling / grammar, layout / UI, functional defect, etc).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAll defects that are logged by members must include the following:\n\n\n\n\n\n\nEnvironment\n\n\n\n\n\n\nSteps to reproduce\n\n\n\n\n\n\nOutcome vs. Expected Outcome\n\n\n\n\n\n\nScreenshot or Video\n\n\n\n\n\n\n\n\n\n\nIn addition, participants must take the following under consideration:\n\n\n\n\n\n\nBefore logging an issue, they must ensure that there is no similar issue already logged.\n\n\n\n\n\n\nIssues must be clearly described. They must reference a test case (perhaps a video reproducing the issue or a document with steps on how to reproduce the issue) along with the expected vs actual results in order for the issue to be counted.\n\n\n\n\n\n\nIf an issue is not properly documented, we may reject it and it will not count.\n\n\n\n\n\n\nIf an issue is seen in multiple screens \n logged as multiple issues, they will only count as one. Others will be marked as duplicate.\n\n\n\n\n\n\nThe first participant to find an issue gets the credit - duplicate issues will not be counted.\n\n\n\n\n\n\n\n\n\n\nCopilot Payments\n\n\nHow Payments are Calculated\n\n\nPayments are made based on the successful completion of the challenge. The payment is displayed once a draft is created in Direct.  On the challenge page in direct, scroll down to the prizes section and view the payments section\n\n\n\n\nWhen Payments Are Made\n\n\nPayments follow the standard topcoder challenge payment process detailed in the help center: \nhttps://help.topcoder.com/hc/en-us/articles/217482038-Payment-Policies-and-Instructions\n\n\nPenalties\n\n\nA copilot is \nnot compensated for failed challenges.\n\n\nApplying for Being a Dev Copilot\n\n\nEligibility Requirements\n\n\nVerify that you meet all eligibility requirements before applying. To apply to be a Development Copilot, you must have:   \n\n\n\n\n\n\nWon 3 development challenges in any technology\n\n\n\n\n\n\nPassed review in 3 challenges in the specified skill/technology for the challenges you wish to copilot\n\n\n\n\n\n\nSubmitted to 1 Bug Hunt/Bash\n\n\n\n\n\n\nSubmitted to 1 First to Finish\n\n\n\n\n\n\nPosted 25 times in the Topcoder forums\n\n\n\n\n\n\nNot been suspended for any reason in the last year\n\n\n\n\n\n\nMinimally Qualified Candidate Description\n\n\n[Take from the Blueprints/MQCs]\n\n\nHow to Apply\n\n\nIf you meet the minimum requirements and are interested in applying, complete the application form located \nhere\n.\n\n\nApplications are accepted at all times. Applications will periodically be reviewed in the order received when Topcoder is ready to add new members in this role. If you have a question about the next expected review period, please contact Topcoder Support.", 
            "title": "Copilot Responsibilities"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#dev-copilot-role-responsibilities", 
            "text": "", 
            "title": "Dev Copilot Role &amp; Responsibilities"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#overview", 
            "text": "What is a Copilot?  A highly respected and skilled Topcoder member who has passed a certification process and is responsible for running challenges to produce the best outcome.    The copilot receives it name originally from an airplane copilot who is responsible for helping the main pilot with flying the plane.  But just like in the airlines, a copilot is the first officer and is  not  an apprentice or sidekick but shares flying duties equally with the pilot.  Both roles can fly the plane and take part in the decision making.  This is no difference here, copilots along with the client and architects drive the project to success.", 
            "title": "Overview"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#primary-responsibilities", 
            "text": "Write challenge specifications    Launch challenges    Provide technical consistency between challenges    Reduce risk in challenges    Monitor challenge health    Interact and support the community for all of challenges they launch    Communicate accurate status reports to challenge owners.    Manage budget    Manage timelines    Manage deployment of the application    Spot check reviewers and submissions    Extract and clarify requirements from challenge owners    Manage source control", 
            "title": "Primary Responsibilities"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#expectations-of-deliverables-and-outcomes", 
            "text": "The copilot is responsible for the successful delivery of a challenge or set of challenges.  At the end of each challenge, the copilot should answering these vital questions:  Were the requirements met?  Did we deliver what we set out to implement?  This includes fully documented, tested, and deployable code.", 
            "title": "Expectations of Deliverables and Outcomes"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#time-investment", 
            "text": "Copilots are expected to drive projects to completion.  This includes analyzing specifications and projects, running challenges, building and deploying applications and supporting development inquiries.    Supporting a challenge we estimate takes    2-4 hours writing a challenge specification    2 hours a day supporting forums during submission phase (this might be short)    2-4 hours reviewing the output of the review phase and deploying an application", 
            "title": "Time Investment"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#performance-evaluation", 
            "text": "Delivery of materials on time and according to gameplan \n   \n   \n     Challenge price point comes in on budget and in line with other similar challenges \n   \n   \n     Challenge fulfillment \n   \n   \n     Customer satisfaction \n   \n   \n     Member satisfaction (clarity of spec, communicating important information, quality of spec, responsiveness within SLAs for forum questions, etc.) \n   \n   \n     Reviewer satisfaction \n   \n   \n     Project Copilot satisfaction \n   \n   \n     Challenge Manager/Architect satisfaction (quality of spec, matching requirements, etc.)", 
            "title": "Performance Evaluation"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#the-copilot-mindset", 
            "text": "The copilot is the leader!  You are the equal partner of the client running the project.  Together you will set the course and direction to produce a fantastic outcome.", 
            "title": "The Copilot Mindset"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#being-a-copilot", 
            "text": "This is a prestigious position.  Only the best are invited to this role and are entrusted with working with Topcoder's clients and their confidential projects.  Not only are you responsible for delivery for the client but also producing quality opportunities for the rest of the Topcoder community.", 
            "title": "Being a Copilot"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#working-with-the-community", 
            "text": "Your job is to guide the community to the best outcomes possible for a challenge.  You'll help support and nurture the community to work on your challenges.  Additionally, you'll constructively provide feedback and guide them through the submission process.  Lastly, you'll provide the final job as reviewer and arbiter to make sure the community produces high level of outcomes.", 
            "title": "Working with the Community"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#working-with-the-customer", 
            "text": "Your job is to help guide the client along the correct path.  At the end of the day we need a successful outcome and your job is to steer the team in that direction.  You will need to be respectful and listen to the customer but your job is not to do exactly as the customer requests if those instructions would put the project in jeopardy by increasing timelines, exceeding budgets and/or adding risky technology decisions.", 
            "title": "Working with the Customer"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#code-of-ethics", 
            "text": "Do not provide favoritism to any one member.  Treat all the members the same.  Do not provide any information to a competitor that is not provided to all competitors.  Be honest, do not try to make the situation sound better than it is.  Always tell the whole story including all issues with any clients.  In addition to the above, you are expected to always comply with our standard  Terms  and  Code of Conduct . Failure to do so may result in loss of the position and suspension or expulsion from the community.", 
            "title": "Code of Ethics"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#secrets-for-success", 
            "text": "Communicate, communicate, communicate!  Don't be afraid to communicate to everyone and anyone.    Push to get work done sooner and launch challenges sooner.  You can always clean up mistakes later but harder to get back missing time.    Use  continuous  integration  to build often and faster!    Decreases integration time    Code review becomes easier    Decreases merging    Puts code in the hand of the clients faster.    Run tests and make sure code coverage is there    Test earlier and find bugs earlier!      Include  more  testing.  Add more testing to your gameplans.  Don't wait to the end to test and find bugs.  Do it as often as possible.  Ideally every 2 weeks    Provide milestone releases.  Release versions to QA as soon as you can.  Ideally you don't go longer than 2-3 weeks without a deploy.    Give clear and concise statements about what is required and expected in all forum interactions.  Ambiguous statements make it hard for members and reviewers to set the appropriate expectations.    View submissions early!  If someone submits early, take a peek.  It is a great feeling to know you are going to have at least one working solution and it will help to manage customer expectations and timelines.    Know your  development challenge types !  It is also good to review the different design challenge types and  data science challenge types  in case you need to recommend using one of those types instead.  Don't worry you would get additional help from a trained copilot for those types.", 
            "title": "Secrets for Success"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#applying-for-opportunities", 
            "text": "Development Challenges  You will be added to a copilot list.  A topcoder employee will email you and offer you positions.  Please email the employee any questions and review the opportunity.  Afterwards, you can an accept or reject the opportunity over email.  Connect V1  As a Connect Copilot you will be added to Topcoder Slack.  You will see a channel called connect-copilots   You will see admins posting projects and you can reply if you are interested right in slack to be assigned. Before accepting, please view the link for the requirements and technologies used.   Connect V2  TBD", 
            "title": "Applying for Opportunities"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#how-to-perform-the-copilot-roles", 
            "text": "", 
            "title": "How to Perform the Copilot roles"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#signing-an-nda-and-terms", 
            "text": "If you would like to be considered as a copilot for NDA based challenges.  Please make sure you have completed this NDA   https://www.docusign.net/member/EnvelopeSetupTab.aspx?ti=a086d4f2bd4d42b8be116f6ff5a2fa7d o", 
            "title": "Signing an NDA and Terms"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#how-to-create-a-gameplan-for-development", 
            "text": "NOTE: There needs to be a lifecycle management section. Gameplan creation only happens once.  Gameplans, or project plans, are created at the beginning of the project as a project is being scoped for both cost and duration. Gameplans can be created as follows:", 
            "title": "How to Create a Gameplan for Development"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#requesting-a-new-quote", 
            "text": "In slack type the slash command \"/quote\" followed by the name of the project.    Chose a name for the quote that makes it unique like the project name    After the command is typed, the quote is created and the slack window will be updated with a link to the quote    Click the link and log into Smartsheet. Be sure to login to smartsheet with the same email as your slack account.    Once you\u2019ve logged into smartsheet you will be presented with a blank quote in smartsheet.", 
            "title": "Requesting a new quote"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#editing-a-new-quote", 
            "text": "Once a new quote has been created you can edit the quote in smartsheet to build out a Gameplan. The following columns in the smartsheet are important for building this game plan    Task Description - The task description is the name or title of the challenge. This should be a descriptive name of the challenge but not too long that it will wrap in direct. A good challenge name should have the project name embedded in it as well.    Start - This is the date when you plan to have the challenge start. Many challenges will have this date set automatically based on dependencies of previous challengs.    End - This is the date when you plan to have the challenge end. This is related to the start date and the challenge duration.    Duration - This is the number of days the challenge is planned to run. Duration, Start Date, and End Date all work together, You can only update two of the three, the other is calculated. If you change the duration, the end date will automatically change. If you change the end date, the duration will change.    Average Duration is a field based on historic data for this challenge type.    Predecessors - This shows the dependencies of a challenge on another row.    Inputs - This defines the expected inputs for a given challenge.    Outcomes - These are the planned outcomes of a given challenge    Challenge Type - one of:    Design-Wireframe    Design-MobileStoryboard    Design-WebStoryboard    Design-Ideation    Design-Prototype    Design-F2F    Dev-Assembly    Dev-Code    Dev-F2F    Dev-BugHunt    Design-Prod-Wireframe      Challenge types are prefixed by the challenge community they belong to.    Challenge Size - one of :    small    medium    large", 
            "title": "Editing a new quote"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#writing-a-specification", 
            "text": "Review all project documentation and deliverables    Communicate all questions with other team members including clients.    Review how to write a good spec tutorial    Launch the challenge    Through Topcoder Direct    Log into  http://topcoder.com/direct       Chose your project name and billing account    Schedule your start date and submission date as well as the challenge type.    For review type select community or internal (only use this if you are reviewing or the client.       Insert your requirements and overview here       You must select your technology    Upload any  PUBLIC  files here. Any private challenges must be uploaded to the forums after the challenge has been created.  These files are  OPEN to EVERYONE,  even unregistered members.    Adjust prizes, usually the defaults are fine but you have the flexibility to change them.    You can use the preview button to see what your challenge looks like.    Click  Save as draft  or continue.  Once you click  Continue  you also need to click  Activate  to make it live!      Through Glib   https://help.topcoder.com/hc/en-us/articles/225540228-Topcoder-Integration-with-the-Topcoder-Chrome-Extension", 
            "title": "Writing a specification"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#assembly-vs-code-vs-jira-task-vs-f2f", 
            "text": "First review all of the different challenge types:  https://help.topcoder.com/hc/en-us/articles/217481558-Development-Challenge-Types    First To Finish  (or F2F) is used when you need code quickly and the task is well defined and typically is a small amount of work.    Assembly  challenges are used when you know what the expected output is.  These challenges include final fixes.    Code  challenges are used for more creative iterative challenges.  Final fixes are not included and any follow on changes should be rolled into the next challenge.", 
            "title": "Assembly vs Code vs Jira Task vs F2F"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#reviewing-your-challenge", 
            "text": "Confirm you have access to the competition management system called Online Review or OR. Log into online review at http://software.topcoder.com/review    You will now see My Open Projects and click on the appropriate challenge      Verify Competition details by clicking on the challenge name in the previous menu and verifying your dates are correct.  You will also notice in green the highlighted phase specific tabs for this challenge.      At the bottom of the page you will notice the Project details and team members.  You will see Topcoder staff assigned as orange handles.       You can now click the forum link in the top right hand menu.  This will take you to the forums. This will ensure you have access to the appropriate forum and you will want to click watch to receive email notifications.       HINT:  this  link  will list all of your watched forums.  You can edit your preferences from there.", 
            "title": "Reviewing your challenge"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#adding-team-members", 
            "text": "At the bottom of your challenge in Online Review you can click \"Manage Project\"       Then you can enter observers or a designer to watch the project if you need help.       Optionally you can add other roles by click edit project and scrolling down the the roles section.       NOTE: This gives you more control, but the first one is simpler to use and will meet 99% of the use cases.", 
            "title": "Adding Team Members"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#rules-for-extending-changing-timelines", 
            "text": "If the submission phase is closed you CANNOT reopen the challenge unless there were issue with Topcoder's systems    If the submission phase is not closed you can extend for the following reasons    Relevant forum questions have not been answered for more than 24 hours.    Some of the relevant materials were provided late after the Submission started.    There was a significant change in the requirements after the Submission started.    There was a problem with TopCoder servers which prevented competitors from working on the contest.    Extensions will not be added in the last 24 hours.      Minimum extension time frame is 24 hours.    Tips and Tricks    Usually a failed challenge has an issue.  Best bet is to post to the forums find out why people are not participating and repost    Relaunch the challenge as a F2F or with a short timeline if you think someone will submit    Ask members to submit even if they think they will fail.  You still might be able to use a failed submission see  Failed Submissions  section.", 
            "title": "Rules for Extending / Changing Timelines"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#changing-timelines", 
            "text": "In your project click Edit Project button       Now you can see all the phases in the timeline section       Changing the duration in terms of number of hours or hours:minutes will change the timeline for the current phase by adding that time to the start date of the phase    Alternatively you may click the button next to phase end and enter an EXACT time the phase should end and the phase will end based on that time.    Reopening phases is not possible in this tool, you must contact  support@topcoder.com  to reopen a phase if necessary.", 
            "title": "Changing Timelines"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#managing-git-source-control", 
            "text": "Review the great article by  Vincent Driessen  on git flow here: http://nvie.com/posts/a-successful-git-branching-model/    We follow the Git Flow process (NOTE: not Github Flow)    Branching Model Setup (gitlow style):    Master Branch (default in most cases) used for releases only. Version Tags should be applied at release time.    Develop Branch (branched from master) used for active development line and candidate releases (tags)    Create Feature branch based on each feature being developed.  Follow the convention of prefixing the name of the branch with the challenge id.      Mark all branches as protected.  This will prevent members from overwriting branches.      Each member will fork and issue Pull/Merge requests against    Merging:    After accepting the winning submission merge request into feature branch merge the feature branch into the \"develop\" branch after performing integration testing.    Proper gitflow usage dictates using the --no-ff option to prevent \"fast-forwarding\" of commits.      Releases:    Release candidates should come from the \"develop\" branch and be tagged as such.    Merge \"develop\" into the \u201cmaster\u201d in preparation for release (--no-ff)    Releases should be pulled from the \"master\" branch only    Tag the \"master\" at each major release (with version number/name)", 
            "title": "Managing Git Source Control"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#forum-support", 
            "text": "During the competition it is important for the copilot to manage and monitor the forums.  We recommend you at least answer questions twice a day at 8 am and 8 pm your time. Topcoder's commitment to members is to provide them an answer within 24 hours of their post.  If questions are unanswered for a long period of time most likely the question poster and other members will not participate in the challenge.    Remember all responses here become part of the challenge requirements.  Be clear and concise in all answers.  Do not leave things ambiguous.", 
            "title": "Forum Support"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#registration-phase", 
            "text": "Copilots will monitor member registration during this phase.  In Online Review, you can view the registration tab to view who has registered for the challenge.         You will want to make sure you have a mix of members who are active.  By clicking on their name you can view their profile to see what challenges they have worked on and how active they are at Topcoder.    This is also a good time to view the forums to see who has been answering questions.  If there are no questions, you may need to reach out to the members.    If the track is rated, you will be able to view the ratings for those members in the track.  See more about ratings:    Reliability is used for a few tracks.  It measures how often a member submits a passing submission when they register for a challenge.  See more about reliability:  https://help.topcoder.com/hc/en-us/articles/219240797-Development-Reliability-Ratings-and-Bonuses    TIP: If a member submits early you can view their submissions in the submission and screening tab and download the submission to view it.", 
            "title": "Registration Phase"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#increasing-registration-for-a-challenge", 
            "text": "Topcoder sends newsletters to all members on a weekly basis.  You can contact  support@topcoder.com  to request that your challenge be listed.    Support will also help add your challenge to our social media rotation of posts.    Plug your challenge in the  General Development Forums .", 
            "title": "Increasing Registration for a Challenge"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#the-submissionscreening-phase", 
            "text": "In online review you can view all of the submissions.  This tab is accessible as soon as the submission phase opens.    By clicking the submission number, you can download the latest submission.      The plus symbol expands to see earlier submissions       If screening is enabled for this phase, you can view the scorecard and status if it is completed.", 
            "title": "The Submission/Screening Phase"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#the-review-phase", 
            "text": "In online review you can view all of the submissions.  This tab is accessible as soon as the submission phase opens.    By clicking the submission number, you can download the latest submission.      The plus symbol expands to see earlier submissions       If screening is enabled for this phase, you can view the scorecard and status if it is completed.", 
            "title": "The Review Phase"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#expectations-for-the-final-fix-phase-and-code-challenges", 
            "text": "For code this is easy, there is no final fix phase.  You should not expect members to implement final fixes.  This is accomplished with a follow on task or challenge.    For assembly challenges, any items that were in the requirements and were not implemented are fixable if they were identified as part of the scorecard.  If a member does not implement these fixes 25% of their payment may be held and used to task someone else to implement these fixes.", 
            "title": "Expectations for the Final Fix Phase and Code Challenges"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#failed-submissions", 
            "text": "If a challenge fails and doesn't receive any passing submissions it does not have to end there!    Review the submissions and review the scorecards    Do any of the submissions get you to a great starting spot?      If yes, offer them second place prize money and use that code as the building blocks to a follow on challenge    If not you will need to restart a new challenge.", 
            "title": "Failed Submissions"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#support-during-the-competition", 
            "text": "During the competition if you need any support around your challenge there are resources to help you.    Click contact managers to contact Topcoder Staff", 
            "title": "Support during the competition"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#running-a-bug-bash-from-source-control", 
            "text": "Account/Access Structure:    Unless required, repositories will be private by default    Create team/group based access to repositories    Member group access includes:    receive read/write access to repository    ability to create tickets    ability to self-assign tickets    ability to add and remove tags from tickets    repo user should equate/tie to platform user      Manager group access includes:    receive read/write access to repository    ability to create tickets    ability to self-assign tickets    ability to create wiki pages    administrative control over repo    repo user should equate/tie to platform user        requisite teams applied to groups of repos for visibility over other components of a project.      Follow proper branching (see earlier topic)    Challenge Setup:    In your challenge, ask the community to email you/co-pilot and request access to the project group (\"Goliath National Bank Team\") by sending their username.    Create your challenge as a code challenge.  You should provide an overview of the app and advertise your project here.  Provide link to SCM.    Add community member to the group  (example name \"Goliath National Bank Team\") with \u201cDeveloper\u201d access only. This allows them to create tickets, fork the repo, and create branches but will not allow them to touch protected branches. Note: this level of access is a concept from Gitlab that does not exist in Github currently. See  https://gitlab.com/help/permissions/permissions.md    Have member add challenge managers to their private branch as a master and reviews as reporter. Note: this level of access is a concept from Gitlab that does not exist in Github currently.      Submission Process:    Require community members to fork the project at the feature branch to acquire the current code base. This will allow for concurrent challenge running as each branch is a separate challenge.    Two options for gaining access to code are available.    Require submissions of code by through a merge request.  The only issue with this method is that the code can be viewed in a \"diff\" of the merge request. This is the prefered method, unless privacy is a concern use the second.    Require that the managers   reviewers be added to the private fork as a member. This is not exactly the ideal automation but it does get around the visibility of the code in the merge request diff.        Review Process:    Test pull/merge request submissions locally before accepting.    If submission passes, accept merging into feature branch.    If submission fails, reviewer can make comments directly against code or merge request ticket.      Wikis:    Wikis should be utilized extensively as a central repository for project information.    Types of information include:    Project description    Setup guides    Reference materials    \"Bug Bash\" instructions    Challenge detail listings        Issues List    Issues lists can be utilized for general bug tracking as well as \"Bug Bashing\"    Members can be alerted to issue tickets by utilizing the @all/@organization/team-name mention    Bug Bashing Process    Create the following tags on the repo:    \"_OPEN FOR PICKUP\" denoting ticket is available to members to self-assign    \"_READY FOR REVIEW\" denoting that a member has completed the requested work    \"_ACCEPTED\" denoting managers have accepted ticket solution    \"_PAID\" denoting ticket has been processed for payment    \"Priority X\" where X is a value from 1 through 5 denoting Appirio triage priorities (1-Blocker through 5-Enhancement)      Assign a priority label to tickets.    Assign a \"point\" value to all tickets in the ticket title as a prefix.    Points represent some fixed dollar amount designated by the managers    As a general rubric, point values are a multiple or priority. ie: Priority 1 issues should be addressed first and thus should hold a higher points value than lower priorities. P1s == 4P, P2 == 3P, etc.    The purpose of points is to create an arbitrary value for tickets that can be driven up and down on demand. For example, a weekend \"double points blitz\" can incent members to scramble and burn down tickets faster.      Mention @all members that a ticket is available for pickup.    Members self-assign tickets    Only one ticket is allowed per member at a time.    If a member has not submitted within 24hrs, the member forfeits the ticket and the ticket is unassigned.    Member labels ticket as \"_READY FOR REVIEW\" once their submission is ready.      After reviewing submission the manager/reviewer marks the ticket as \"_ACCEPTED\"    After the manager has accepted the submission and process payment, the ticket is labelled \"_PAID\" and payment reference placed as a comment on the ticket.", 
            "title": "Running a bug bash from Source control"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#running-a-f2f", 
            "text": "First to finish  works very similar to a challenge but the first person to submit can win.      Typically the copilot will also serve as the reviewer here since you know what the solution needs to do.    Review the solution, provide feedback in the forum and/or scorecard.  If you fail the solution another solution may be right behind it.  After each solution is reviewed, another one is taken off the queue.  If a submission wins, the rest are ignored.      Suggestions    Use these for when you do not need variety in solutions.    You should also know the expected outcome in advance.    Total time spent on this work should be under 8 hours.", 
            "title": "Running a F2F"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#running-jira-tasks", 
            "text": "While Topcoder Direct is a powerful tool, there are times when work or tasks are done outside of the platform and there is a need to pay a member directly. This will document that process.  Pre Requisites  When you create a ticket in JIRA for payment, the processor needs to know which project, and thus which billing account, to charge the work to. You will need:    Project in TC Direct associated to at least 1 valid Billing Account    A JIRA project    Handle of the member you are paying    Creating a ticket    Navigate to your JIRA project.   NOTE: JIRA allows you to create components within your JIRA project. If you plan on running multiple projects out of your JIRA instance, or would benefit from being able to segment your tasks, consider using these (but not required by tool).     Select \"Create Bug\" link    The following fields are required in the default JIRA form:    Summary - Short description of task; this will show up in your customer's invoice so choose words wisely    Reporter - Whoever logged the issue - could be copilot or you.    First Place Payment - Amount of the member payment. Does NOT include markup.    Cockpit Project ID: This is the unique ID of your project in Topcoder Direct. If you are viewing your project, you can see it in the URL where the project id is XXXXX  https://www.topcoder.com/direct/projectOverview.action?formData.projectId=XXXXX    Payment Status: Must be set to \"Payment Owed\" to be picked up by the payment processor.    Select \"Create\" button to create the ticket.    When ticket is ready to be paid, the final step is to \"Resolve\" the ticket in JIRA. This and the \"Payment Owed\" setting are what flags the ticket for the payment processor.      Best Practices    Use the  Description  field to store the details of task performed to justify the payment. If the work was done in an external system, include links to the work here. Remember: this is work the customer will be invoiced for, so if questions arise when they are reviewing for payment, you'll want to have links to the details already in place.    Use the  Components  field to help segment work done for different projects on the account (if applicable).    Power move - include the Topcoder Project ID in the Components name - i.e.  MobileApp1-10123 . One of the more common mistakes is entering the wrong project ID and invoicing the wrong billing account - this can help prevent that.", 
            "title": "Running Jira Tasks"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#managing-a-bug-hunt", 
            "text": "Bug Hunts are different then most contests on topcoder.com - in that the reviewer is not assigned to the contest from the review pool, instead, the reviewer is the copilot. Copilots are responsible for reviewing all issues   managing the contest. This includes:      Modifying the contest timeline in OR so that the first 24 hours of the contest is a a registration period, and posting in the contest spec / forum that no one can submit any bug.    During the registration period, providing a link to the deployed app or a link + instructions on building / deploying the code. This is done in the contest forum.    After the submission phase ends:    Reviewing every defect and verifying that it\u2019s valid.    Rejecting duplicate issues (the ticket submitted first is logged against the total for a submitter).    Determine if the issue reported constitutes an acceptable issue (spelling / grammar, layout / UI, functional defect, etc).        All defects that are logged by members must include the following:    Environment    Steps to reproduce    Outcome vs. Expected Outcome    Screenshot or Video      In addition, participants must take the following under consideration:    Before logging an issue, they must ensure that there is no similar issue already logged.    Issues must be clearly described. They must reference a test case (perhaps a video reproducing the issue or a document with steps on how to reproduce the issue) along with the expected vs actual results in order for the issue to be counted.    If an issue is not properly documented, we may reject it and it will not count.    If an issue is seen in multiple screens   logged as multiple issues, they will only count as one. Others will be marked as duplicate.    The first participant to find an issue gets the credit - duplicate issues will not be counted.", 
            "title": "Managing a bug hunt"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#copilot-payments", 
            "text": "", 
            "title": "Copilot Payments"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#how-payments-are-calculated", 
            "text": "Payments are made based on the successful completion of the challenge. The payment is displayed once a draft is created in Direct.  On the challenge page in direct, scroll down to the prizes section and view the payments section", 
            "title": "How Payments are Calculated"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#when-payments-are-made", 
            "text": "Payments follow the standard topcoder challenge payment process detailed in the help center:  https://help.topcoder.com/hc/en-us/articles/217482038-Payment-Policies-and-Instructions", 
            "title": "When Payments Are Made"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#penalties", 
            "text": "A copilot is  not compensated for failed challenges.", 
            "title": "Penalties"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#applying-for-being-a-dev-copilot", 
            "text": "", 
            "title": "Applying for Being a Dev Copilot"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#eligibility-requirements", 
            "text": "Verify that you meet all eligibility requirements before applying. To apply to be a Development Copilot, you must have:       Won 3 development challenges in any technology    Passed review in 3 challenges in the specified skill/technology for the challenges you wish to copilot    Submitted to 1 Bug Hunt/Bash    Submitted to 1 First to Finish    Posted 25 times in the Topcoder forums    Not been suspended for any reason in the last year", 
            "title": "Eligibility Requirements"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#minimally-qualified-candidate-description", 
            "text": "[Take from the Blueprints/MQCs]", 
            "title": "Minimally Qualified Candidate Description"
        }, 
        {
            "location": "/topcoder/copilotsResponsiblites/#how-to-apply", 
            "text": "If you meet the minimum requirements and are interested in applying, complete the application form located  here .  Applications are accepted at all times. Applications will periodically be reviewed in the order received when Topcoder is ready to add new members in this role. If you have a question about the next expected review period, please contact Topcoder Support.", 
            "title": "How to Apply"
        }, 
        {
            "location": "/topcoder/fixingBugs/", 
            "text": "Current Development Branch:  dev\nmtwomey edited this page on Dec 24, 2014 \u00b7 12 revisions\n\n\n\nRules for Fixing Bugs (Issues)\n\n\nIE11 is the primary browser used for the application. Please make sure to test all fixes against this browser.\n\n\n\n\nAll eligible tasks / issues will be labeled \u201cUp For Grabs\u201d  You can assign any unassigned issues with this label to yourself (first come first serve)\n\n\nYou can only assign yourself ONE issue at a time. We will monitor this and take away tasks if you do not comply\n\n\nIf you cannot complete the task within 24 hours, add a comment to it as to why, or it will go back to unassigned\n\n\nEach task / issue will have points allocated to it which will translate to prizes\n\n\n\n\nProcess for Resolving Bugs (Issues)\n\n\n\n\nRemove the \"Up For Grabs\" label from the Issue and assign it to yourself\n\n\nCreate a branch off the Current Development Branch (see the top of this page)\n\n\ngit checkout -b [YOUR-USERNAME]-issue-[ISSUE#] [CURRENT DEVELOPMENT BRANCH]\n\n\nfor example \ngit checkout -b mtwomey-issue-22 dev\n\n\nPlease make \nsure\n you are branching off the correct development branch and not master!\n\n\nDo your work on this branch\n\n\nDo frequent pulls of the Current Development Branch if you're working the issue for more than a few hours\n\n\ngit pull --rebase origin [CURRENT DEVELOPMENT BRANCH]\n\n\nOnce you finish the task\n\n\nCommit your changes\n\n\nDo a final \ngit pull --rebase origin [CURRENT DEVELOPMENT BRANCH]\n to make sure nothing has changed that affects your fixes\n\n\nPush your branch to GitHub\n\n\ngit push origin [BRANCH NAME]\n\n\nAdd the \"Ready for Review\" label to the Issue\n\n\nCreate a pull request for your branch to the Current Development Branch\n\n\nStart your next issue!\n\n\n\n\nTips\n\n\n\n\nIf you have questions, post a comment on the github issue\n\n\nIf you have questions on this process contact mtwomey@appirio.com\n\n\n\n\nPoint System\n\n\n1 point = $25 and will be paid weekly\n\n\nThe tasks are geared to be small in scope and completed quickly.  Some may take longer than others but in general should be less than a day.", 
            "title": "Fixing Bugs from github"
        }, 
        {
            "location": "/topcoder/fixingBugs/#rules-for-fixing-bugs-issues", 
            "text": "IE11 is the primary browser used for the application. Please make sure to test all fixes against this browser.   All eligible tasks / issues will be labeled \u201cUp For Grabs\u201d  You can assign any unassigned issues with this label to yourself (first come first serve)  You can only assign yourself ONE issue at a time. We will monitor this and take away tasks if you do not comply  If you cannot complete the task within 24 hours, add a comment to it as to why, or it will go back to unassigned  Each task / issue will have points allocated to it which will translate to prizes", 
            "title": "Rules for Fixing Bugs (Issues)"
        }, 
        {
            "location": "/topcoder/fixingBugs/#process-for-resolving-bugs-issues", 
            "text": "Remove the \"Up For Grabs\" label from the Issue and assign it to yourself  Create a branch off the Current Development Branch (see the top of this page)  git checkout -b [YOUR-USERNAME]-issue-[ISSUE#] [CURRENT DEVELOPMENT BRANCH]  for example  git checkout -b mtwomey-issue-22 dev  Please make  sure  you are branching off the correct development branch and not master!  Do your work on this branch  Do frequent pulls of the Current Development Branch if you're working the issue for more than a few hours  git pull --rebase origin [CURRENT DEVELOPMENT BRANCH]  Once you finish the task  Commit your changes  Do a final  git pull --rebase origin [CURRENT DEVELOPMENT BRANCH]  to make sure nothing has changed that affects your fixes  Push your branch to GitHub  git push origin [BRANCH NAME]  Add the \"Ready for Review\" label to the Issue  Create a pull request for your branch to the Current Development Branch  Start your next issue!", 
            "title": "Process for Resolving Bugs (Issues)"
        }, 
        {
            "location": "/topcoder/fixingBugs/#tips", 
            "text": "If you have questions, post a comment on the github issue  If you have questions on this process contact mtwomey@appirio.com", 
            "title": "Tips"
        }, 
        {
            "location": "/topcoder/fixingBugs/#point-system", 
            "text": "1 point = $25 and will be paid weekly  The tasks are geared to be small in scope and completed quickly.  Some may take longer than others but in general should be less than a day.", 
            "title": "Point System"
        }, 
        {
            "location": "/topcoder/RagnarGit/", 
            "text": "Title:\n Ragnar: Git Process for Challenges\n\n\nAuthor:\n Chris DeLaurentis\n\n\nDate:\n 20141112\n\n\nAbstract:\n This document outlines how best to utilize Gitflow for challenge management and suggestions for integration into the Topcoder platform.\n\n\nDefinitions:\n\n\nMember:\n a community participant competing on a competition \n\n \nManager:\n a Copilot or Project Manager overseeing the project \n\n \nRepo:\n a code repository with the purpose of managing one functional piece of software or designs for a project. ie: SFDC services, mobile app framework, assembled application, storyboard designs, etc. \n\n \nTeam/Group:\n an organizational unit of members and/or managers applied to a set of repos. \n\n\nProcess:\n\n\nAccount/Access Structure:\n\n\n\n\nunless required, repositories should be private by default\n\n\nteam/group based access to repositories\n\n\nMember group access includes:\n\n\nreceive read/write access to repository\n\n\nability to create tickets\n\n\nability to self-assign tickets\n\n\nability to add and remove tags from tickets\n\n\nrepo user should equate/tie to platform user\n\n\n\n\n\n\nManager group access includes:\n\n\nreceive read/write access to repository\n\n\nability to create tickets\n\n\nability to self-assign tickets\n\n\nability to create wiki pages\n\n\nadministrative control over repo\n\n\nrepo user should equate/tie to platform user\n\n\n\n\n\n\nrequisite teams applied to groups of repos for visibility over other components of a project.\n\n\n\n\n\n\n\n\nBranching Model Setup (gitlow style):\n\n\n\n\ncreate \nmaster\n branch. Used for releases only.\n\n\nbranch \nmaster\n to create a \u201cdevelop\u201d branch. Used for active development line and release candidates (via tags).\n\n\nbranch \ndevelop\n for each feature being developed (\u201cAdmin Widget 1\u201d, \u201cBlog components\u201d). Prefix name of branch with challenge Id.\n\n\n\u201cOfficial\u201d branches (master, develop, \n features) should be marked \u201cprotected\u201d. Note: This is a concept from Gitlab that does not exist in Github currently.\n\n\n\n\nChallenge Setup:\n\n\n\n\nIn your challenge, ask the community to email you/co-pilot and request access to the project group (\u201cGoliath National Bank Team\u201d) by sending their username. This should ideally be automated at sign up of challenge.\n\n\nAdd community member to the group  (example name \u201cGoliath National Bank Team\u201d) with \u201cDeveloper\u201d access only. This allows them to create tickets, fork the repo, and create branches but will not allow them to touch protected branches. Note: this level of access is a concept from Gitlab that does not exist in Github currently. See https://gitlab.com/help/permissions/permissions.md\n\n\nHave member add challenge managers to their private branch as a master and reviews as reporter. Note: this level of access is a concept from Gitlab that does not exist in Github currently.\n\n\n\n\nSubmission Process:\n\n\n\n\nRequire community members to fork the project at the feature branch to acquire the current code base. This will allow for concurrent challenge running as each branch is a separate challenge.\n\n\nTwo options for gaining access to code are available. Note: private forks are unique to Gitlab only and thus protect member code.\n\n\nRequire submissions of code by through a merge request.  The only issue with this method is that the code can be viewed in a \u201cdiff\u201d of the merge request.\n\n\nRequire that the managers \n reviewers be added to the private fork as a member. This is not exactly the ideal automation but it does get around the visibility of the code in the merge request diff.\n\n\n\n\n\n\n\n\nReview Process:\n\n\n\n\nTest pull/merge request submissions locally before accepting.\n\n\nIf submission passes, accept merging into feature branch.\n\n\nIf submission fails, reviewer can make comments directly against code or merge request ticket.\n\n\n\n\nMerging:\n\n\n\n\nAfter accepting the winning submission merge request into feature branch merge the feature branch into the \u201cdevelop\u201d branch after performing integration testing.\n\n\nProper gitflow usage dictates using the --no-ff option to prevent \u201cfast-forwarding\u201d of commits.\n\n\n\n\nReleases:\n\n\n\n\nRelease candidates should come from the \u201cdevelop\u201d branch and be tagged as such.\n\n\nMerge \u201cdevelop\u201d into the \u201cmaster\u201d in preparation for release (--no-ff)\n\n\nReleases should be pulled from the \u201cmaster\u201d branch only\n\n\nTag the \u201cmaster\u201d at each major release (with version number/name)\n\n\n\n\nWikis:\n\n\n\n\nWikis should be utilized extensively as a central repository for project information.\n\n\nTypes of information include:\n\n\nProject description\n\n\nSetup guides\n\n\nReference materials\n\n\n\u201cBug Bash\u201d instructions\n\n\nChallenge detail listings\n\n\n\n\n\n\n\n\nIssues List\n\n\n\n\nIssues lists can be utilized for general bug tracking as well as \u201cBug Bashing\u201d\n\n\nMembers can be alerted to issue tickets by utilizing the @all/@organization/team-name mention\n\n\nBug Bashing Process\n\n\nCreate the following tags on the repo:\n\n\n_OPEN FOR PICKUP\n denoting ticket is available to members to self-assign\n\n\n_READY FOR REVIEW\n denoting that a member has completed the requested work\n\n\n_ACCEPTED\n denoting managers have accepted ticket solution\n\n\n_PAID\n denoting ticket has been processed for payment\n\n\nPriority X\n where X is a value from 1 through 5 denoting Appirio triage priorities (1-Blocker through 5-Enhancement)\n\n\n\n\n\n\nAssign a priority label to tickets.\n\n\nAssign a \u201cpoint\u201d value to all tickets in the ticket title as a prefix.\n\n\nPoints represent some fixed dollar amount designated by the managers\n\n\nAs a general rubric, point values are a multiple or priority. ie: Priority 1 issues should be addressed first and thus should hold a higher points value than lower priorities. P1s == 4P, P2 == 3P, etc.\n\n\nThe purpose of points is to create an arbitrary value for tickets that can be driven up and down on demand. For example, a weekend \u201cdouble points blitz\u201d can incent members to scramble and burn down tickets faster.\n\n\n\n\n\n\nMention @all members that a ticket is available for pickup.\n\n\nMembers self-assign tickets\n\n\nOnly one ticket is allowed per member at a time.\n\n\nIf a member has not submitted within 24hrs, the member forfeits the ticket and the ticket is unassigned.\n\n\nMember labels ticket as \u201c_READY FOR REVIEW\u201d once their submission is ready.\n\n\n\n\n\n\nAfter reviewing submission the manager/reviewer marks the ticket as \u201c_ACCEPTED\u201d\n\n\nAfter the manager has accepted the submission and process payment, the ticket is labelled \u201c_PAID\u201d and payment reference placed as a comment on the ticket\n\n\n\n\nNotes:\n\n\n\n\nThis process  includes:\n\n\ncode version control\n\n\nproject flow control\n\n\nsubmission control\n\n\nreview control\n\n\nissues triage/burndown\n\n\nrelease management\n\n\ninformation centralization\n\n\nmember-manager communication\n\n\n\n\nAs highlighted in the above process nearly the entire challenge life-cycle could essentially be encapsulated inside a git management service such as GitLab. Essentially, branches equate to individual challenges and \u201cbug bashes\u201d as a collection of F2Fs.\n\n\nSome things that are missing or could be integrated:\n\n\n\n\nGame-planning: could be tied in or auto created from an API based tool like Smart Sheet.\n\n\nPayments: could be tied in through something like tracking of manager comments and @mentions as well as git/web hooks.\n\n\nMarketing/Advertising: could be tied back to the platform through something like @mentions as well as git/web hooks.\n\n\nSSO: members should have a unified \u201cworld-view\u201d that ties their TC handle direct to their git system handle.\n\n\nDerived/Big Data Intelligence:\n\n\nRepos could be crawled for their technologies and member associations to automagically correlated.\n\n\nCosting per line of code could be established based upon commits and tied back to challenge payments and \u201cbug bash\u201d values.\n\n\nProject health metrics based upon commits, code comments, issue comments and other interactions.\n\n\nScanning for security leaks of IP\n\n\n\n\nReferences:\n\n\n\n\nGitFlow: http://nvie.com/posts/a-successful-git-branching-model/\n\n\nGitFlow extension project: https://github.com/nvie/gitflow\n\n\nGitLab Flow: https://gitlab.com/help/workflow/gitlab_flow.md\n\n\nZenhub.io https://www.zenhub.io/  cardwall on top of github issues.", 
            "title": "Ragnar: Git Process"
        }, 
        {
            "location": "/topcoder/RagnarGit/#definitions", 
            "text": "Member:  a community participant competing on a competition  \n  Manager:  a Copilot or Project Manager overseeing the project  \n  Repo:  a code repository with the purpose of managing one functional piece of software or designs for a project. ie: SFDC services, mobile app framework, assembled application, storyboard designs, etc.  \n  Team/Group:  an organizational unit of members and/or managers applied to a set of repos.", 
            "title": "Definitions:"
        }, 
        {
            "location": "/topcoder/RagnarGit/#process", 
            "text": "", 
            "title": "Process:"
        }, 
        {
            "location": "/topcoder/RagnarGit/#accountaccess-structure", 
            "text": "unless required, repositories should be private by default  team/group based access to repositories  Member group access includes:  receive read/write access to repository  ability to create tickets  ability to self-assign tickets  ability to add and remove tags from tickets  repo user should equate/tie to platform user    Manager group access includes:  receive read/write access to repository  ability to create tickets  ability to self-assign tickets  ability to create wiki pages  administrative control over repo  repo user should equate/tie to platform user    requisite teams applied to groups of repos for visibility over other components of a project.", 
            "title": "Account/Access Structure:"
        }, 
        {
            "location": "/topcoder/RagnarGit/#branching-model-setup-gitlow-style", 
            "text": "create  master  branch. Used for releases only.  branch  master  to create a \u201cdevelop\u201d branch. Used for active development line and release candidates (via tags).  branch  develop  for each feature being developed (\u201cAdmin Widget 1\u201d, \u201cBlog components\u201d). Prefix name of branch with challenge Id.  \u201cOfficial\u201d branches (master, develop,   features) should be marked \u201cprotected\u201d. Note: This is a concept from Gitlab that does not exist in Github currently.", 
            "title": "Branching Model Setup (gitlow style):"
        }, 
        {
            "location": "/topcoder/RagnarGit/#challenge-setup", 
            "text": "In your challenge, ask the community to email you/co-pilot and request access to the project group (\u201cGoliath National Bank Team\u201d) by sending their username. This should ideally be automated at sign up of challenge.  Add community member to the group  (example name \u201cGoliath National Bank Team\u201d) with \u201cDeveloper\u201d access only. This allows them to create tickets, fork the repo, and create branches but will not allow them to touch protected branches. Note: this level of access is a concept from Gitlab that does not exist in Github currently. See https://gitlab.com/help/permissions/permissions.md  Have member add challenge managers to their private branch as a master and reviews as reporter. Note: this level of access is a concept from Gitlab that does not exist in Github currently.", 
            "title": "Challenge Setup:"
        }, 
        {
            "location": "/topcoder/RagnarGit/#submission-process", 
            "text": "Require community members to fork the project at the feature branch to acquire the current code base. This will allow for concurrent challenge running as each branch is a separate challenge.  Two options for gaining access to code are available. Note: private forks are unique to Gitlab only and thus protect member code.  Require submissions of code by through a merge request.  The only issue with this method is that the code can be viewed in a \u201cdiff\u201d of the merge request.  Require that the managers   reviewers be added to the private fork as a member. This is not exactly the ideal automation but it does get around the visibility of the code in the merge request diff.", 
            "title": "Submission Process:"
        }, 
        {
            "location": "/topcoder/RagnarGit/#review-process", 
            "text": "Test pull/merge request submissions locally before accepting.  If submission passes, accept merging into feature branch.  If submission fails, reviewer can make comments directly against code or merge request ticket.", 
            "title": "Review Process:"
        }, 
        {
            "location": "/topcoder/RagnarGit/#merging", 
            "text": "After accepting the winning submission merge request into feature branch merge the feature branch into the \u201cdevelop\u201d branch after performing integration testing.  Proper gitflow usage dictates using the --no-ff option to prevent \u201cfast-forwarding\u201d of commits.", 
            "title": "Merging:"
        }, 
        {
            "location": "/topcoder/RagnarGit/#releases", 
            "text": "Release candidates should come from the \u201cdevelop\u201d branch and be tagged as such.  Merge \u201cdevelop\u201d into the \u201cmaster\u201d in preparation for release (--no-ff)  Releases should be pulled from the \u201cmaster\u201d branch only  Tag the \u201cmaster\u201d at each major release (with version number/name)", 
            "title": "Releases:"
        }, 
        {
            "location": "/topcoder/RagnarGit/#wikis", 
            "text": "Wikis should be utilized extensively as a central repository for project information.  Types of information include:  Project description  Setup guides  Reference materials  \u201cBug Bash\u201d instructions  Challenge detail listings", 
            "title": "Wikis:"
        }, 
        {
            "location": "/topcoder/RagnarGit/#issues-list", 
            "text": "Issues lists can be utilized for general bug tracking as well as \u201cBug Bashing\u201d  Members can be alerted to issue tickets by utilizing the @all/@organization/team-name mention  Bug Bashing Process  Create the following tags on the repo:  _OPEN FOR PICKUP  denoting ticket is available to members to self-assign  _READY FOR REVIEW  denoting that a member has completed the requested work  _ACCEPTED  denoting managers have accepted ticket solution  _PAID  denoting ticket has been processed for payment  Priority X  where X is a value from 1 through 5 denoting Appirio triage priorities (1-Blocker through 5-Enhancement)    Assign a priority label to tickets.  Assign a \u201cpoint\u201d value to all tickets in the ticket title as a prefix.  Points represent some fixed dollar amount designated by the managers  As a general rubric, point values are a multiple or priority. ie: Priority 1 issues should be addressed first and thus should hold a higher points value than lower priorities. P1s == 4P, P2 == 3P, etc.  The purpose of points is to create an arbitrary value for tickets that can be driven up and down on demand. For example, a weekend \u201cdouble points blitz\u201d can incent members to scramble and burn down tickets faster.    Mention @all members that a ticket is available for pickup.  Members self-assign tickets  Only one ticket is allowed per member at a time.  If a member has not submitted within 24hrs, the member forfeits the ticket and the ticket is unassigned.  Member labels ticket as \u201c_READY FOR REVIEW\u201d once their submission is ready.    After reviewing submission the manager/reviewer marks the ticket as \u201c_ACCEPTED\u201d  After the manager has accepted the submission and process payment, the ticket is labelled \u201c_PAID\u201d and payment reference placed as a comment on the ticket   Notes:   This process  includes:  code version control  project flow control  submission control  review control  issues triage/burndown  release management  information centralization  member-manager communication   As highlighted in the above process nearly the entire challenge life-cycle could essentially be encapsulated inside a git management service such as GitLab. Essentially, branches equate to individual challenges and \u201cbug bashes\u201d as a collection of F2Fs.  Some things that are missing or could be integrated:   Game-planning: could be tied in or auto created from an API based tool like Smart Sheet.  Payments: could be tied in through something like tracking of manager comments and @mentions as well as git/web hooks.  Marketing/Advertising: could be tied back to the platform through something like @mentions as well as git/web hooks.  SSO: members should have a unified \u201cworld-view\u201d that ties their TC handle direct to their git system handle.  Derived/Big Data Intelligence:  Repos could be crawled for their technologies and member associations to automagically correlated.  Costing per line of code could be established based upon commits and tied back to challenge payments and \u201cbug bash\u201d values.  Project health metrics based upon commits, code comments, issue comments and other interactions.  Scanning for security leaks of IP   References:   GitFlow: http://nvie.com/posts/a-successful-git-branching-model/  GitFlow extension project: https://github.com/nvie/gitflow  GitLab Flow: https://gitlab.com/help/workflow/gitlab_flow.md  Zenhub.io https://www.zenhub.io/  cardwall on top of github issues.", 
            "title": "Issues List"
        }, 
        {
            "location": "/", 
            "text": "Purpose\n\n\nOften one or more github repos and google docs repositories are used in a single github project.   For example:  Front end and back end.  In addition multiple public or private share for binary documents are also used.    This project will serves as a wrapper for both of those conepts as well as being a single repository for documentation.\n\n\nThis project uses mkdocs to provide an simple platform to generate html pages from markdown.   It can be hosted anywhere, includes special provisions for ghpages or can be run locally with \nmkdocs serve\n\n\nTopcoder Theme\n\n\nThis repository uses a third party theme called \ncinder\n.   However this theme has been forked and added the topcoder logo \n.   It would be easy enough to include this forked code directly in the tcProjWrapper repo directly, except this project relies heavily on  submodule for src so we wanted to include the theme as a submodule too.  In addition the submodule could be forked or branched specifly to include a customers logo.\n\n\nTopcoder Docs\n\n\nSince this project also contains content,  We can include standard docs like bug bash instructions.\n\n\nDeploying this template as a project\n\n\nOnce you clone this project with \ngit clone --recursive git@github.com:topcoderinc/tcProjWrapper.git  myproject\n you can then run \nsh bin/setup.sh\n and you will be prompted for the new project name.   This script will remove the git reference to this repo and do a fresh \ngit init\n\nThis file is the index.md in the docs directory.    Edit this file and describe the top level of your project. Also be sure to exit the mkdocs.yml file lines 9-11\n\n\n9  - tcProjWrapper:\n10    - 'This Project introduction': index.md\n11    - mkdocs: mkDocsIndex.md\n\n\n\n\nQuick Start\n\n\n\n\nMake sure you have python2 and pip2 installed, then run \npip2 install mkdocs\n to install mkdocs\n\n\nclone the template \ngit clone --recursive git@github.com:topcoderinc/tcProjWrapper.git  myproject\n\n\ncd \nmyproject\n and run  \nmkdocs serve\n\n\nYou should also edit the mkdocs.yml and edit the sitename.   It might be a good idea to remove the .git dir and do a \ngit init\n to orphan this template(repo) from your new wrapper project.", 
            "title": "This Project introduction"
        }, 
        {
            "location": "/#purpose", 
            "text": "Often one or more github repos and google docs repositories are used in a single github project.   For example:  Front end and back end.  In addition multiple public or private share for binary documents are also used.    This project will serves as a wrapper for both of those conepts as well as being a single repository for documentation.  This project uses mkdocs to provide an simple platform to generate html pages from markdown.   It can be hosted anywhere, includes special provisions for ghpages or can be run locally with  mkdocs serve", 
            "title": "Purpose"
        }, 
        {
            "location": "/#topcoder-theme", 
            "text": "This repository uses a third party theme called  cinder .   However this theme has been forked and added the topcoder logo  .   It would be easy enough to include this forked code directly in the tcProjWrapper repo directly, except this project relies heavily on  submodule for src so we wanted to include the theme as a submodule too.  In addition the submodule could be forked or branched specifly to include a customers logo.", 
            "title": "Topcoder Theme"
        }, 
        {
            "location": "/#topcoder-docs", 
            "text": "Since this project also contains content,  We can include standard docs like bug bash instructions.", 
            "title": "Topcoder Docs"
        }, 
        {
            "location": "/#deploying-this-template-as-a-project", 
            "text": "Once you clone this project with  git clone --recursive git@github.com:topcoderinc/tcProjWrapper.git  myproject  you can then run  sh bin/setup.sh  and you will be prompted for the new project name.   This script will remove the git reference to this repo and do a fresh  git init \nThis file is the index.md in the docs directory.    Edit this file and describe the top level of your project. Also be sure to exit the mkdocs.yml file lines 9-11  9  - tcProjWrapper:\n10    - 'This Project introduction': index.md\n11    - mkdocs: mkDocsIndex.md", 
            "title": "Deploying this template as a project"
        }, 
        {
            "location": "/#quick-start", 
            "text": "Make sure you have python2 and pip2 installed, then run  pip2 install mkdocs  to install mkdocs  clone the template  git clone --recursive git@github.com:topcoderinc/tcProjWrapper.git  myproject  cd  myproject  and run   mkdocs serve  You should also edit the mkdocs.yml and edit the sitename.   It might be a good idea to remove the .git dir and do a  git init  to orphan this template(repo) from your new wrapper project.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/mkDocsIndex/", 
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "mkdocs"
        }, 
        {
            "location": "/mkDocsIndex/#welcome-to-mkdocs", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/mkDocsIndex/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/mkDocsIndex/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/project/", 
            "text": "Placeholder to project docs\n\n\nTODO\n\n\n\n\n[ ] subdocs\n\n\n[ ] binary docs\n\n\n[ ] ghpages", 
            "title": "Project"
        }, 
        {
            "location": "/project/#todo", 
            "text": "[ ] subdocs  [ ] binary docs  [ ] ghpages", 
            "title": "TODO"
        }
    ]
}