{
    "docs": [
        {
            "location": "/topcoder/fixingBugs/", 
            "text": "Current Development Branch:\n \ndev\n\n\nmtwomey edited this page on Dec 24, 2014 \u00b7 12 revisions\n\n\nRules for Fixing Bugs (Issues)\n\n\nIE11 is the primary browser used for the application. Please make sure to test all fixes against this browser.\n\n\n\n\nAll eligible tasks / issues will be labeled \u201cUp For Grabs\u201d  You can assign any unassigned issues with this label to yourself (first come first serve)\n\n\nYou can only assign yourself ONE issue at a time. We will monitor this and take away tasks if you do not comply\n\n\nIf you cannot complete the task within 24 hours, add a comment to it as to why, or it will go back to unassigned\n\n\nEach task / issue will have points allocated to it which will translate to prizes\n\n\n\n\nProcess for Resolving Bugs (Issues)\n\n\n\n\nRemove the \"Up For Grabs\" label from the Issue and assign it to yourself\n\n\nCreate a branch off the Current Development Branch (see the top of this page)\n\n\ngit checkout -b [YOUR-USERNAME]-issue-[ISSUE#] [CURRENT DEVELOPMENT BRANCH]\n\n\nfor example \ngit checkout -b mtwomey-issue-22 dev\n\n\nPlease make \nsure\n you are branching off the correct development branch and not master!\n\n\nDo your work on this branch\n\n\nDo frequent pulls of the Current Development Branch if you're working the issue for more than a few hours\n\n\ngit pull --rebase origin [CURRENT DEVELOPMENT BRANCH]\n\n\nOnce you finish the task\n\n\nCommit your changes\n\n\nDo a final \ngit pull --rebase origin [CURRENT DEVELOPMENT BRANCH]\n to make sure nothing has changed that affects your fixes\n\n\nPush your branch to GitHub\n\n\ngit push origin [BRANCH NAME]\n\n\nAdd the \"Ready for Review\" label to the Issue\n\n\nCreate a pull request for your branch to the Current Development Branch\n\n\nStart your next issue!\n\n\n\n\nTips\n\n\n\n\nIf you have questions, post a comment on the github issue\n\n\nIf you have questions on this process contact mtwomey@appirio.com\n\n\n\n\nPoint System\n\n1 point = $25 and will be paid weekly\n\n\nThe tasks are geared to be small in scope and completed quickly.  Some may take longer than others but in general should be less than a day.", 
            "title": "Fixing Bugs"
        }, 
        {
            "location": "/topcoder/RagnarGit/", 
            "text": "Title:\n Ragnar: Git Process for Challenges\n\n\nAuthor:\n Chris DeLaurentis\n\n\nDate:\n 20141112\n\n\nAbstract:\n This document outlines how best to utilize Gitflow for challenge management and suggestions for integration into the Topcoder platform.\n\n\nDefinitions:\n\n\nMember:\n a community participant competing on a competition \n\n \nManager:\n a Copilot or Project Manager overseeing the project \n\n \nRepo:\n a code repository with the purpose of managing one functional piece of software or designs for a project. ie: SFDC services, mobile app framework, assembled application, storyboard designs, etc. \n\n \nTeam/Group:\n an organizational unit of members and/or managers applied to a set of repos. \n\n\nProcess:\n\n\n\n\nAccount/Access Structure:\n\n\nunless required, repositories should be private by default\n\n\nteam/group based access to repositories\n\n\nMember group access includes:\n\n\nreceive read/write access to repository\n\n\nability to create tickets\n\n\nability to self-assign tickets\n\n\nability to add and remove tags from tickets\n\n\nrepo user should equate/tie to platform user\n\n\n\n\n\n\nManager group access includes:\n\n\nreceive read/write access to repository\n\n\nability to create tickets\n\n\nability to self-assign tickets\n\n\nability to create wiki pages\n\n\nadministrative control over repo\n\n\nrepo user should equate/tie to platform user\n\n\n\n\n\n\nrequisite teams applied to groups of repos for visibility over other components of a project.\n\n\n\n\n\n\n\n\n\n\nBranching Model Setup (gitlow style):\n\n\ncreate \nmaster\n branch. Used for releases only.\n\n\nbranch \nmaster\n to create a \u201cdevelop\u201d branch. Used for active development line and release candidates (via tags).\n\n\nbranch \ndevelop\n for each feature being developed (\u201cAdmin Widget 1\u201d, \u201cBlog components\u201d). Prefix name of branch with challenge Id.\n\n\n\u201cOfficial\u201d branches (master, develop, \n features) should be marked \u201cprotected\u201d. Note: This is a concept from Gitlab that does not exist in Github currently.\n\n\n\n\n\n\nChallenge Setup:\n\n\nIn your challenge, ask the community to email you/co-pilot and request access to the project group (\u201cGoliath National Bank Team\u201d) by sending their username. This should ideally be automated at sign up of challenge.\n\n\nAdd community member to the group  (example name \u201cGoliath National Bank Team\u201d) with \u201cDeveloper\u201d access only. This allows them to create tickets, fork the repo, and create branches but will not allow them to touch protected branches. Note: this level of access is a concept from Gitlab that does not exist in Github currently. See https://gitlab.com/help/permissions/permissions.md\n\n\nHave member add challenge managers to their private branch as a master and reviews as reporter. Note: this level of access is a concept from Gitlab that does not exist in Github currently.\n\n\n\n\n\n\nSubmission Process:\n\n\nRequire community members to fork the project at the feature branch to acquire the current code base. This will allow for concurrent challenge running as each branch is a separate challenge.\n\n\nTwo options for gaining access to code are available. Note: private forks are unique to Gitlab only and thus protect member code.\n\n\nRequire submissions of code by through a merge request.  The only issue with this method is that the code can be viewed in a \u201cdiff\u201d of the merge request.\n\n\nRequire that the managers \n reviewers be added to the private fork as a member. This is not exactly the ideal automation but it does get around the visibility of the code in the merge request diff.\n\n\n\n\n\n\n\n\n\n\nReview Process:\n\n\nTest pull/merge request submissions locally before accepting.\n\n\nIf submission passes, accept merging into feature branch.\n\n\nIf submission fails, reviewer can make comments directly against code or merge request ticket.\n\n\n\n\n\n\nMerging:\n\n\nAfter accepting the winning submission merge request into feature branch merge the feature branch into the \u201cdevelop\u201d branch after performing integration testing.\n\n\nProper gitflow usage dictates using the --no-ff option to prevent \u201cfast-forwarding\u201d of commits.\n\n\n\n\n\n\nReleases:\n\n\nRelease candidates should come from the \u201cdevelop\u201d branch and be tagged as such.\n\n\nMerge \u201cdevelop\u201d into the \u201cmaster\u201d in preparation for release (--no-ff)\n\n\nReleases should be pulled from the \u201cmaster\u201d branch only\n\n\nTag the \u201cmaster\u201d at each major release (with version number/name)\n\n\n\n\n\n\nWikis:\n\n\nWikis should be utilized extensively as a central repository for project information.\n\n\nTypes of information include:\n\n\nProject description\n\n\nSetup guides\n\n\nReference materials\n\n\n\u201cBug Bash\u201d instructions\n\n\nChallenge detail listings\n\n\n\n\n\n\n\n\n\n\nIssues List\n\n\nIssues lists can be utilized for general bug tracking as well as \u201cBug Bashing\u201d\n\n\nMembers can be alerted to issue tickets by utilizing the @all/@organization/team-name mention\n\n\nBug Bashing Process\n\n\nCreate the following tags on the repo:\n\n\n_OPEN FOR PICKUP\n denoting ticket is available to members to self-assign\n\n\n_READY FOR REVIEW\n denoting that a member has completed the requested work\n\n\n_ACCEPTED\n denoting managers have accepted ticket solution\n\n\n_PAID\n denoting ticket has been processed for payment\n\n\nPriority X\n where X is a value from 1 through 5 denoting Appirio triage priorities (1-Blocker through 5-Enhancement)\n\n\n\n\n\n\nAssign a priority label to tickets.\n\n\nAssign a \u201cpoint\u201d value to all tickets in the ticket title as a prefix.\n\n\nPoints represent some fixed dollar amount designated by the managers\n\n\nAs a general rubric, point values are a multiple or priority. ie: Priority 1 issues should be addressed first and thus should hold a higher points value than lower priorities. P1s == 4P, P2 == 3P, etc.\n\n\nThe purpose of points is to create an arbitrary value for tickets that can be driven up and down on demand. For example, a weekend \u201cdouble points blitz\u201d can incent members to scramble and burn down tickets faster.\n\n\n\n\n\n\nMention @all members that a ticket is available for pickup.\n\n\nMembers self-assign tickets\n\n\nOnly one ticket is allowed per member at a time.\n\n\nIf a member has not submitted within 24hrs, the member forfeits the ticket and the ticket is unassigned.\n\n\nMember labels ticket as \u201c_READY FOR REVIEW\u201d once their submission is ready.\n\n\n\n\n\n\nAfter reviewing submission the manager/reviewer marks the ticket as \u201c_ACCEPTED\u201d\n\n\nAfter the manager has accepted the submission and process payment, the ticket is labelled \u201c_PAID\u201d and payment reference placed as a comment on the ticket\n\n\n\n\n\n\n\n\n\n\n\n\nNotes:\n\n\n\n\nThis process  includes:\n\n\ncode version control\n\n\nproject flow control\n\n\nsubmission control\n\n\nreview control\n\n\nissues triage/burndown\n\n\nrelease management\n\n\ninformation centralization\n\n\nmember-manager communication\n\n\n\n\nAs highlighted in the above process nearly the entire challenge life-cycle could essentially be encapsulated inside a git management service such as GitLab. Essentially, branches equate to individual challenges and \u201cbug bashes\u201d as a collection of F2Fs.\n\n\nSome things that are missing or could be integrated:\n\n\n\n\nGame-planning: could be tied in or auto created from an API based tool like Smart Sheet.\n\n\nPayments: could be tied in through something like tracking of manager comments and @mentions as well as git/web hooks.\n\n\nMarketing/Advertising: could be tied back to the platform through something like @mentions as well as git/web hooks.\n\n\nSSO: members should have a unified \u201cworld-view\u201d that ties their TC handle direct to their git system handle.\n\n\nDerived/Big Data Intelligence:\n\n\nRepos could be crawled for their technologies and member associations to automagically correlated.\n\n\nCosting per line of code could be established based upon commits and tied back to challenge payments and \u201cbug bash\u201d values.\n\n\nProject health metrics based upon commits, code comments, issue comments and other interactions.\n\n\nScanning for security leaks of IP\n\n\n\n\nReferences:\n\n\n\n\nGitFlow: http://nvie.com/posts/a-successful-git-branching-model/\n\n\nGitFlow extension project: https://github.com/nvie/gitflow\n\n\nGitLab Flow: https://gitlab.com/help/workflow/gitlab_flow.md\n\n\nZenhub.io https://www.zenhub.io/  cardwall on top of github issues.", 
            "title": "Ragnar: Git Process"
        }, 
        {
            "location": "/topcoder/RagnarGit/#definitions", 
            "text": "Member:  a community participant competing on a competition  \n  Manager:  a Copilot or Project Manager overseeing the project  \n  Repo:  a code repository with the purpose of managing one functional piece of software or designs for a project. ie: SFDC services, mobile app framework, assembled application, storyboard designs, etc.  \n  Team/Group:  an organizational unit of members and/or managers applied to a set of repos.", 
            "title": "Definitions:"
        }, 
        {
            "location": "/topcoder/RagnarGit/#process", 
            "text": "Account/Access Structure:  unless required, repositories should be private by default  team/group based access to repositories  Member group access includes:  receive read/write access to repository  ability to create tickets  ability to self-assign tickets  ability to add and remove tags from tickets  repo user should equate/tie to platform user    Manager group access includes:  receive read/write access to repository  ability to create tickets  ability to self-assign tickets  ability to create wiki pages  administrative control over repo  repo user should equate/tie to platform user    requisite teams applied to groups of repos for visibility over other components of a project.      Branching Model Setup (gitlow style):  create  master  branch. Used for releases only.  branch  master  to create a \u201cdevelop\u201d branch. Used for active development line and release candidates (via tags).  branch  develop  for each feature being developed (\u201cAdmin Widget 1\u201d, \u201cBlog components\u201d). Prefix name of branch with challenge Id.  \u201cOfficial\u201d branches (master, develop,   features) should be marked \u201cprotected\u201d. Note: This is a concept from Gitlab that does not exist in Github currently.    Challenge Setup:  In your challenge, ask the community to email you/co-pilot and request access to the project group (\u201cGoliath National Bank Team\u201d) by sending their username. This should ideally be automated at sign up of challenge.  Add community member to the group  (example name \u201cGoliath National Bank Team\u201d) with \u201cDeveloper\u201d access only. This allows them to create tickets, fork the repo, and create branches but will not allow them to touch protected branches. Note: this level of access is a concept from Gitlab that does not exist in Github currently. See https://gitlab.com/help/permissions/permissions.md  Have member add challenge managers to their private branch as a master and reviews as reporter. Note: this level of access is a concept from Gitlab that does not exist in Github currently.    Submission Process:  Require community members to fork the project at the feature branch to acquire the current code base. This will allow for concurrent challenge running as each branch is a separate challenge.  Two options for gaining access to code are available. Note: private forks are unique to Gitlab only and thus protect member code.  Require submissions of code by through a merge request.  The only issue with this method is that the code can be viewed in a \u201cdiff\u201d of the merge request.  Require that the managers   reviewers be added to the private fork as a member. This is not exactly the ideal automation but it does get around the visibility of the code in the merge request diff.      Review Process:  Test pull/merge request submissions locally before accepting.  If submission passes, accept merging into feature branch.  If submission fails, reviewer can make comments directly against code or merge request ticket.    Merging:  After accepting the winning submission merge request into feature branch merge the feature branch into the \u201cdevelop\u201d branch after performing integration testing.  Proper gitflow usage dictates using the --no-ff option to prevent \u201cfast-forwarding\u201d of commits.    Releases:  Release candidates should come from the \u201cdevelop\u201d branch and be tagged as such.  Merge \u201cdevelop\u201d into the \u201cmaster\u201d in preparation for release (--no-ff)  Releases should be pulled from the \u201cmaster\u201d branch only  Tag the \u201cmaster\u201d at each major release (with version number/name)    Wikis:  Wikis should be utilized extensively as a central repository for project information.  Types of information include:  Project description  Setup guides  Reference materials  \u201cBug Bash\u201d instructions  Challenge detail listings      Issues List  Issues lists can be utilized for general bug tracking as well as \u201cBug Bashing\u201d  Members can be alerted to issue tickets by utilizing the @all/@organization/team-name mention  Bug Bashing Process  Create the following tags on the repo:  _OPEN FOR PICKUP  denoting ticket is available to members to self-assign  _READY FOR REVIEW  denoting that a member has completed the requested work  _ACCEPTED  denoting managers have accepted ticket solution  _PAID  denoting ticket has been processed for payment  Priority X  where X is a value from 1 through 5 denoting Appirio triage priorities (1-Blocker through 5-Enhancement)    Assign a priority label to tickets.  Assign a \u201cpoint\u201d value to all tickets in the ticket title as a prefix.  Points represent some fixed dollar amount designated by the managers  As a general rubric, point values are a multiple or priority. ie: Priority 1 issues should be addressed first and thus should hold a higher points value than lower priorities. P1s == 4P, P2 == 3P, etc.  The purpose of points is to create an arbitrary value for tickets that can be driven up and down on demand. For example, a weekend \u201cdouble points blitz\u201d can incent members to scramble and burn down tickets faster.    Mention @all members that a ticket is available for pickup.  Members self-assign tickets  Only one ticket is allowed per member at a time.  If a member has not submitted within 24hrs, the member forfeits the ticket and the ticket is unassigned.  Member labels ticket as \u201c_READY FOR REVIEW\u201d once their submission is ready.    After reviewing submission the manager/reviewer marks the ticket as \u201c_ACCEPTED\u201d  After the manager has accepted the submission and process payment, the ticket is labelled \u201c_PAID\u201d and payment reference placed as a comment on the ticket       Notes:   This process  includes:  code version control  project flow control  submission control  review control  issues triage/burndown  release management  information centralization  member-manager communication   As highlighted in the above process nearly the entire challenge life-cycle could essentially be encapsulated inside a git management service such as GitLab. Essentially, branches equate to individual challenges and \u201cbug bashes\u201d as a collection of F2Fs.  Some things that are missing or could be integrated:   Game-planning: could be tied in or auto created from an API based tool like Smart Sheet.  Payments: could be tied in through something like tracking of manager comments and @mentions as well as git/web hooks.  Marketing/Advertising: could be tied back to the platform through something like @mentions as well as git/web hooks.  SSO: members should have a unified \u201cworld-view\u201d that ties their TC handle direct to their git system handle.  Derived/Big Data Intelligence:  Repos could be crawled for their technologies and member associations to automagically correlated.  Costing per line of code could be established based upon commits and tied back to challenge payments and \u201cbug bash\u201d values.  Project health metrics based upon commits, code comments, issue comments and other interactions.  Scanning for security leaks of IP   References:   GitFlow: http://nvie.com/posts/a-successful-git-branching-model/  GitFlow extension project: https://github.com/nvie/gitflow  GitLab Flow: https://gitlab.com/help/workflow/gitlab_flow.md  Zenhub.io https://www.zenhub.io/  cardwall on top of github issues.", 
            "title": "Process:"
        }, 
        {
            "location": "/", 
            "text": "Purpose\n\n\nOften one or more github repos and google docs repositories are used in a single github project.   For example:  Front end and back end.  In addition multiple public or private share for binary documents are also used.    This project will serves as a wrapper for both of those conepts as well as being a single repository for documentation.\n\n\nThis project uses mkdocs to provide an simple platform to generate html pages from markdown.   It can be hosted anywhere, includes special provisions for ghpages or can be run locally with \nmkdocs serve\n\n\nTopcoder Theme\n\n\nThis repository uses a third party theme called \ncinder\n.   However this theme has been forked and added the topcoder logo \n.   It would be easy enough to include this forked code directly in the tcProjWrapper repo directly, except this project relies heavily on  submodule for src so we wanted to include the theme as a submodule too.  In addition the submodule could be forked or branched specifly to include a customers logo.\n\n\nTopcoder Docs\n\n\nSince this project also contains content,  We can include standard docs like bug bash instructions.\n\n\nQuick Start\n\n\n\n\nMake sure you have python2 and pip2 installed, then run \npip2 install mkdocs\n to install mkdocs\n\n\nclone the template \ngit clone --recursive git@github.com:topcoderinc/tcProjWrapper.git  myproject\n\n\ncd \nmyproject\n and run  \nmkdocs serve\n\n\nYou should also edit the mkdocs.yml and edit the sitename.   It might be a good idea to remove the .git dir and do a \ngit init\n to orphan this template(repo) from your new wrapper project.", 
            "title": "This Project introduction"
        }, 
        {
            "location": "/#purpose", 
            "text": "Often one or more github repos and google docs repositories are used in a single github project.   For example:  Front end and back end.  In addition multiple public or private share for binary documents are also used.    This project will serves as a wrapper for both of those conepts as well as being a single repository for documentation.  This project uses mkdocs to provide an simple platform to generate html pages from markdown.   It can be hosted anywhere, includes special provisions for ghpages or can be run locally with  mkdocs serve", 
            "title": "Purpose"
        }, 
        {
            "location": "/#topcoder-theme", 
            "text": "This repository uses a third party theme called  cinder .   However this theme has been forked and added the topcoder logo  .   It would be easy enough to include this forked code directly in the tcProjWrapper repo directly, except this project relies heavily on  submodule for src so we wanted to include the theme as a submodule too.  In addition the submodule could be forked or branched specifly to include a customers logo.", 
            "title": "Topcoder Theme"
        }, 
        {
            "location": "/#topcoder-docs", 
            "text": "Since this project also contains content,  We can include standard docs like bug bash instructions.", 
            "title": "Topcoder Docs"
        }, 
        {
            "location": "/#quick-start", 
            "text": "Make sure you have python2 and pip2 installed, then run  pip2 install mkdocs  to install mkdocs  clone the template  git clone --recursive git@github.com:topcoderinc/tcProjWrapper.git  myproject  cd  myproject  and run   mkdocs serve  You should also edit the mkdocs.yml and edit the sitename.   It might be a good idea to remove the .git dir and do a  git init  to orphan this template(repo) from your new wrapper project.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/mkDocsIndex/", 
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "mkdocs"
        }, 
        {
            "location": "/mkDocsIndex/#welcome-to-mkdocs", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/mkDocsIndex/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/mkDocsIndex/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/Todo/", 
            "text": "TODO\n\n\n\n\n[ ] subdocs\n\n\n[ ] binary docs\n\n\n[ ] ghpages", 
            "title": "Todo"
        }, 
        {
            "location": "/Todo/#todo", 
            "text": "[ ] subdocs  [ ] binary docs  [ ] ghpages", 
            "title": "TODO"
        }
    ]
}